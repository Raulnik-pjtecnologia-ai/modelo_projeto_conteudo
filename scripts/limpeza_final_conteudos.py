import os
import glob
import re
import json
from datetime import datetime

def limpeza_final_conteudos():
    """Aplica limpeza final nos conte√∫dos existentes"""
    
    print("================================================================================")
    print("LIMPEZA FINAL DE CONTE√öDOS EXISTENTES")
    print("================================================================================")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Limpeza final e corre√ß√µes nos conte√∫dos existentes")
    
    # Buscar todos os conte√∫dos
    conteudos = []
    patterns = [
        "2_conteudo/02_conteudos_prontos/**/*.md",
        "docs/**/*.md"
    ]
    
    for pattern in patterns:
        files = glob.glob(pattern, recursive=True)
        conteudos.extend(files)
    
    # Filtrar arquivos de documenta√ß√£o e scripts
    conteudos_filtrados = []
    for conteudo in conteudos:
        if not any(skip in conteudo for skip in [
            "scripts/", "relatorio_", "plano_", "analise_", 
            "regra_", "temp_", "backup_", "README.md"
        ]):
            conteudos_filtrados.append(conteudo)
    
    print(f"üìä Conte√∫dos para limpeza: {len(conteudos_filtrados)}")
    
    if not conteudos_filtrados:
        print("‚ùå Nenhum conte√∫do encontrado")
        return
    
    # Aplicar limpeza
    processados = 0
    erros = 0
    correcoes = []
    
    for i, filepath in enumerate(conteudos_filtrados, 1):
        print(f"\nüßπ Limpando {i}/{len(conteudos_filtrados)}: {os.path.basename(filepath)}")
        
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Aplicar corre√ß√µes
            content_limpo, correcoes_arquivo = aplicar_limpeza_final(content, filepath)
            
            # Salvar conte√∫do limpo
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content_limpo)
            
            correcoes.extend(correcoes_arquivo)
            print(f"   ‚úÖ Limpeza conclu√≠da ({len(correcoes_arquivo)} corre√ß√µes)")
            processados += 1
            
        except Exception as e:
            print(f"   ‚ùå Erro: {str(e)}")
            erros += 1
    
    # Relat√≥rio final
    print("\n================================================================================")
    print("RELAT√ìRIO FINAL - LIMPEZA")
    print("================================================================================")
    print(f"üìä Total processados: {len(conteudos_filtrados)}")
    print(f"‚úÖ Limpos com sucesso: {processados}")
    print(f"‚ùå Erros: {erros}")
    print(f"üîß Total de corre√ß√µes: {len(correcoes)}")
    
    # Mostrar tipos de corre√ß√µes
    tipos_correcao = {}
    for correcao in correcoes:
        tipo = correcao.get('tipo', 'Outro')
        tipos_correcao[tipo] = tipos_correcao.get(tipo, 0) + 1
    
    print("\nüìã Tipos de corre√ß√µes aplicadas:")
    for tipo, quantidade in tipos_correcao.items():
        print(f"   ‚Ä¢ {tipo}: {quantidade}")
    
    # Salvar relat√≥rio
    relatorio = {
        "timestamp": datetime.now().isoformat(),
        "total_processados": len(conteudos_filtrados),
        "limpos_sucesso": processados,
        "erros": erros,
        "total_correcoes": len(correcoes),
        "tipos_correcao": tipos_correcao,
        "correcoes_detalhadas": correcoes
    }
    
    with open("relatorio_limpeza_final_conteudos.json", "w", encoding="utf-8") as f:
        json.dump(relatorio, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Relat√≥rio salvo em: relatorio_limpeza_final_conteudos.json")
    
    if processados == len(conteudos_filtrados):
        print("\nüéâ TODOS OS CONTE√öDOS LIMPOS COM SUCESSO!")
    else:
        print(f"\n‚ö†Ô∏è {len(conteudos_filtrados) - processados} conte√∫dos precisam de aten√ß√£o manual")

def aplicar_limpeza_final(content, filepath):
    """Aplica limpeza final em um conte√∫do espec√≠fico"""
    
    correcoes = []
    
    # 1. CORRE√á√ÉO DE SINTAXE MARKDOWN - Remover |--| e pipes desnecess√°rios
    if "|--|" in content or "|---|---|" in content:
        content_original = content
        
        # Remover linhas de separa√ß√£o de tabela
        content = re.sub(r'^\s*\|-+\|\s*$', '', content, flags=re.MULTILINE)
        content = re.sub(r'^\s*\|--\|\s*$', '', content, flags=re.MULTILINE)
        content = re.sub(r'^\s*\|-+\|+\s*$', '', content, flags=re.MULTILINE)
        
        # Limpar pipes de in√≠cio e fim de linha
        content = re.sub(r'^\s*\|\s*', '', content, flags=re.MULTILINE)
        content = re.sub(r'\s*\|\s*$', '', content, flags=re.MULTILINE)
        
        # Substituir pipes internos por espa√ßos
        content = re.sub(r'\s*\|\s*', ' ', content)
        
        if content != content_original:
            correcoes.append({
                "tipo": "Sintaxe Markdown",
                "descricao": "Removida sintaxe de tabela markdown incorreta",
                "arquivo": os.path.basename(filepath)
            })
    
    # 2. REMO√á√ÉO DE INFORMA√á√ïES T√âCNICAS
    info_tecnicas_removidas = 0
    
    # Remover URLs de backup
    if "Backup Local:" in content:
        content = re.sub(r'Backup Local: .*\.jpg', '', content)
        info_tecnicas_removidas += 1
    
    if "Imgur:" in content:
        content = re.sub(r'Imgur: N/A', '', content)
        info_tecnicas_removidas += 1
    
    if "GitHub:" in content:
        content = re.sub(r'GitHub: .*\.jpg', '', content)
        info_tecnicas_removidas += 1
    
    if "M√©todo Atual:" in content:
        content = re.sub(r'M√©todo Atual: .*', '', content)
        info_tecnicas_removidas += 1
    
    if "Local:" in content:
        content = re.sub(r'Local: .*\.jpg', '', content)
        info_tecnicas_removidas += 1
    
    # Remover timestamps
    if re.search(r'\d{4}_\d{2}_\d{2}_\d{6}\.jpg', content):
        content = re.sub(r'\d{4}_\d{2}_\d{2}_\d{6}\.jpg', '', content)
        info_tecnicas_removidas += 1
    
    # Remover metadados
    if "[IMAGEM:" in content:
        content = re.sub(r'\[IMAGEM: .*\]', '', content)
        info_tecnicas_removidas += 1
    
    if info_tecnicas_removidas > 0:
        correcoes.append({
            "tipo": "Informa√ß√µes T√©cnicas",
            "descricao": f"Removidas {info_tecnicas_removidas} informa√ß√µes t√©cnicas desnecess√°rias",
            "arquivo": os.path.basename(filepath)
        })
    
    # 3. LIMPEZA DE REFER√äNCIAS EXTERNAS
    ref_externas_removidas = 0
    
    # Remover callouts com refer√™ncias a arquivos locais
    if "consulte o arquivo local" in content.lower():
        content = re.sub(r'> \*\*.*consulte o arquivo local.*\*\*', '', content, flags=re.IGNORECASE)
        ref_externas_removidas += 1
    
    if "arquivo mencionado acima" in content.lower():
        content = re.sub(r'> \*\*.*arquivo mencionado acima.*\*\*', '', content, flags=re.IGNORECASE)
        ref_externas_removidas += 1
    
    # Remover links para arquivos .md externos
    if "\.md" in content and "assets/" not in content:
        content = re.sub(r'\[.*\]\(.*\.md\)', '', content)
        ref_externas_removidas += 1
    
    if ref_externas_removidas > 0:
        correcoes.append({
            "tipo": "Refer√™ncias Externas",
            "descricao": f"Removidas {ref_externas_removidas} refer√™ncias a arquivos externos",
            "arquivo": os.path.basename(filepath)
        })
    
    # 4. CORRE√á√ÉO DE FORMATA√á√ÉO
    formatacao_corrigida = 0
    
    # Garantir que t√≠tulos principais usem H1
    if not content.startswith('#') and content.strip():
        lines = content.split('\n')
        if lines[0].strip():
            lines[0] = f"# {lines[0].strip()}"
            content = '\n'.join(lines)
            formatacao_corrigida += 1
    
    # Corrigir espa√ßamento excessivo
    if re.search(r'\n\s*\n\s*\n\s*\n', content):
        content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)
        formatacao_corrigida += 1
    
    # Corrigir listas mal formatadas
    if re.search(r'^\s*-\s*$', content, re.MULTILINE):
        content = re.sub(r'^\s*-\s*$', '', content, flags=re.MULTILINE)
        formatacao_corrigida += 1
    
    if formatacao_corrigida > 0:
        correcoes.append({
            "tipo": "Formata√ß√£o",
            "descricao": f"Aplicadas {formatacao_corrigida} corre√ß√µes de formata√ß√£o",
            "arquivo": os.path.basename(filepath)
        })
    
    # 5. VALIDA√á√ÉO DE ESTRUTURA
    estrutura_corrigida = 0
    
    # Adicionar se√ß√µes essenciais se ausentes
    secoes_essenciais = ["Introdu√ß√£o", "Contexto", "Aplica√ß√£o", "Conclus√£o"]
    secoes_presentes = sum(1 for secao in secoes_essenciais if secao in content)
    
    if secoes_presentes < 2 and "artigo_" in os.path.basename(filepath):
        # Adicionar estrutura b√°sica para artigos
        estrutura_basica = """
## üìã Resumo Executivo
Este documento apresenta estrat√©gias e pr√°ticas para gest√£o escolar, oferecendo orienta√ß√µes pr√°ticas para implementa√ß√£o em institui√ß√µes educacionais.

## üéØ Contexto e Desafios
A gest√£o escolar moderna enfrenta diversos desafios que exigem abordagens estruturadas e inovadoras.

## üí° Aplica√ß√£o Pr√°tica
Implementa√ß√£o de estrat√©gias eficazes para melhorar a gest√£o escolar.

## üöÄ Conclus√£o
Gest√£o escolar √© um processo cont√≠nuo que requer comprometimento e planejamento.
"""
        content = estrutura_basica + content
        estrutura_corrigida += 1
    
    if estrutura_corrigida > 0:
        correcoes.append({
            "tipo": "Estrutura",
            "descricao": f"Aplicadas {estrutura_corrigida} corre√ß√µes de estrutura",
            "arquivo": os.path.basename(filepath)
        })
    
    # 6. LIMPEZA FINAL
    # Remover linhas vazias no in√≠cio e fim
    content = content.strip()
    
    # Garantir que termine com quebra de linha
    if not content.endswith('\n'):
        content += '\n'
    
    return content, correcoes

if __name__ == "__main__":
    limpeza_final_conteudos()
