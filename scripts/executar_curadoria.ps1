# Script PowerShell para Executar Curadoria Autom√°tica
# Utiliza MCPs dispon√≠veis para verificar qualidade, fontes e elementos visuais

param(
    [string]$Diretorio = "",
    [int]$MinPontuacao = 70,
    [switch]$Ajuda
)

if ($Ajuda) {
    Write-Host "=== CUARDORIA AUTOM√ÅTICA DE CONTE√öDO ===" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "Uso: .\executar_curadoria.ps1 [op√ß√µes]"
    Write-Host ""
    Write-Host "Op√ß√µes:"
    Write-Host "  -Diretorio <caminho>    Diret√≥rio espec√≠fico para analisar"
    Write-Host "  -MinPontuacao <numero>  Pontua√ß√£o m√≠nima para aprova√ß√£o (padr√£o: 70)"
    Write-Host "  -Ajuda                  Mostra esta ajuda"
    Write-Host ""
    Write-Host "Exemplos:"
    Write-Host "  .\executar_curadoria.ps1"
    Write-Host "  .\executar_curadoria.ps1 -Diretorio '2_conteudo\04_publicado'"
    Write-Host "  .\executar_curadoria.ps1 -MinPontuacao 80"
    Write-Host ""
    exit 0
}

# Configura√ß√µes
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$ProjetoRoot = Split-Path -Parent $ScriptDir
$PythonScript = Join-Path $ScriptDir "curadoria_automatica.py"

Write-Host "üîç CUARDORIA AUTOM√ÅTICA DE CONTE√öDO" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan
Write-Host ""

# Verificar se o Python est√° dispon√≠vel
try {
    $pythonVersion = python --version 2>&1
    Write-Host "‚úÖ Python encontrado: $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python n√£o encontrado. Instale o Python 3.7+ e tente novamente." -ForegroundColor Red
    exit 1
}

# Verificar se o script Python existe
if (-not (Test-Path $PythonScript)) {
    Write-Host "‚ùå Script de curadoria n√£o encontrado: $PythonScript" -ForegroundColor Red
    exit 1
}

# Construir comando
$comando = "python `"$PythonScript`""

if ($Diretorio) {
    $comando += " --diretorio `"$Diretorio`""
}

$comando += " --projeto `"$ProjetoRoot`""
$comando += " --min-pontuacao $MinPontuacao"

Write-Host "üìÅ Diret√≥rio do projeto: $ProjetoRoot" -ForegroundColor Yellow
if ($Diretorio) {
    Write-Host "üìÇ Diret√≥rio para analisar: $Diretorio" -ForegroundColor Yellow
} else {
    Write-Host "üìÇ Analisando diret√≥rio padr√£o: 2_conteudo" -ForegroundColor Yellow
}
Write-Host "üéØ Pontua√ß√£o m√≠nima para aprova√ß√£o: $MinPontuacao%" -ForegroundColor Yellow
Write-Host ""

# Executar curadoria
Write-Host "üöÄ Iniciando an√°lise..." -ForegroundColor Green
Write-Host ""

try {
    Invoke-Expression $comando
    
    if ($LASTEXITCODE -eq 0) {
        Write-Host ""
        Write-Host "‚úÖ Curadoria conclu√≠da com sucesso!" -ForegroundColor Green
        Write-Host "üìä Relat√≥rios salvos em: docs\relatorios\" -ForegroundColor Cyan
    } else {
        Write-Host ""
        Write-Host "‚ùå Erro durante a execu√ß√£o da curadoria." -ForegroundColor Red
        Write-Host "Verifique os logs para mais detalhes." -ForegroundColor Yellow
    }
} catch {
    Write-Host ""
    Write-Host "‚ùå Erro ao executar curadoria: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host ""
Write-Host "Pressione qualquer tecla para continuar..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
