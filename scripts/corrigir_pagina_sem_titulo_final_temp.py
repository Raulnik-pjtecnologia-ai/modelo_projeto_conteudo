#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script Final para Corrigir P√°gina Sem T√≠tulo
Corrige a p√°gina espec√≠fica que est√° sem t√≠tulo usando a propriedade correta "Title"
"""

import os
import sys
import requests
import json
from datetime import datetime

sys.stdout.reconfigure(encoding='utf-8')

NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "")
if not NOTION_TOKEN:
    print("ERRO: Configure NOTION_TOKEN")
    sys.exit(1)

DATABASE_ALUNO = "2695113a91a381ddbfc4fc8e4df72e7f"

headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def corrigir_pagina_sem_titulo():
    """Corrigir a p√°gina espec√≠fica que est√° sem t√≠tulo"""
    print("üîß Corrigindo p√°gina sem t√≠tulo...")
    
    # ID da p√°gina problem√°tica identificada
    page_id = "2705113a-91a3-806e-b5cc-d090a5df49b2"
    
    # Primeiro, obter a p√°gina para ver seu conte√∫do
    url = f"https://api.notion.com/v1/pages/{page_id}"
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code != 200:
            print(f"‚ùå Erro ao buscar p√°gina: {response.status_code}")
            return False
        
        page_data = response.json()
        properties = page_data.get("properties", {})
        
        print("üìÑ Propriedades da p√°gina:")
        for prop_name, prop_data in properties.items():
            prop_type = prop_data.get("type", "unknown")
            print(f"   ‚Ä¢ {prop_name}: {prop_type}")
        
        # Definir t√≠tulo baseado no conte√∫do dispon√≠vel
        titulo_sugerido = "Conte√∫do ENEM - Prepara√ß√£o Acad√™mica"
        
        # Verificar se h√° alguma propriedade que possa indicar o tipo de conte√∫do
        tipo_conteudo = properties.get("Tipo de Conte√∫do", {}).get("select", {}).get("name", "")
        if tipo_conteudo:
            titulo_sugerido = f"Conte√∫do ENEM - {tipo_conteudo}"
        
        # Preparar atualiza√ß√µes
        properties_to_update = {
            "Title": {
                "title": [
                    {
                        "type": "text",
                        "text": {
                            "content": titulo_sugerido
                        }
                    }
                ]
            },
            "P√∫blico Alvo": {
                "multi_select": [
                    {"name": "Estudantes ENEM"},
                    {"name": "Pr√©-vestibulandos"}
                ]
            },
            "Tags Tema": {
                "multi_select": [
                    {"name": "ENEM"},
                    {"name": "Estudos"},
                    {"name": "Prepara√ß√£o"}
                ]
            },
            "Fun√ß√£o Alvo": {
                "multi_select": [
                    {"name": "Pedag√≥gica"},
                    {"name": "Estrat√©gica"}
                ]
            },
            "Status Editorial": {
                "select": {"name": "Publicado"}
            }
        }
        
        print(f"\nüîß Aplicando corre√ß√µes...")
        print(f"   T√≠tulo: '{titulo_sugerido}'")
        
        # Aplicar corre√ß√µes
        update_url = f"https://api.notion.com/v1/pages/{page_id}"
        update_data = {"properties": properties_to_update}
        
        update_response = requests.patch(update_url, headers=headers, json=update_data)
        
        if update_response.status_code == 200:
            print("‚úÖ P√°gina corrigida com sucesso!")
            return True
        else:
            print(f"‚ùå Erro ao atualizar: {update_response.status_code}")
            print(f"üìù Resposta: {update_response.text}")
            return False
        
    except Exception as e:
        print(f"‚ùå Erro: {str(e)}")
        return False

def verificar_conformidade_final():
    """Verifica√ß√£o final de conformidade"""
    print("\nüìä Verifica√ß√£o final de conformidade...")
    
    url = f"https://api.notion.com/v1/databases/{DATABASE_ALUNO}/query"
    
    try:
        response = requests.post(url, headers=headers, json={})
        if response.status_code != 200:
            print(f"‚ùå Erro ao verificar conformidade: {response.status_code}")
            return False
        
        data = response.json()
        pages = data.get("results", [])
        
        total_pages = len(pages)
        pages_conformes = 0
        problemas_restantes = []
        
        for page in pages:
            # Extrair t√≠tulo usando a propriedade correta "Title"
            properties = page.get("properties", {})
            title_prop = properties.get("Title", {})
            page_title = "Sem t√≠tulo"
            
            if title_prop.get("type") == "title":
                title_array = title_prop.get("title", [])
                if title_array and len(title_array) > 0:
                    page_title = title_array[0].get("text", {}).get("content", "Sem t√≠tulo")
            
            problemas_pagina = []
            
            # Verificar P√∫blico Alvo
            publico_alvo = properties.get("P√∫blico Alvo", {})
            if publico_alvo.get("type") != "multi_select" or not publico_alvo.get("multi_select"):
                problemas_pagina.append("P√∫blico Alvo")
            
            # Verificar Tags Tema
            tags_tema = properties.get("Tags Tema", {})
            if tags_tema.get("type") != "multi_select" or not tags_tema.get("multi_select"):
                problemas_pagina.append("Tags Tema")
            
            # Verificar Fun√ß√£o Alvo
            funcao_alvo = properties.get("Fun√ß√£o Alvo", {})
            if funcao_alvo.get("type") != "multi_select" or not funcao_alvo.get("multi_select"):
                problemas_pagina.append("Fun√ß√£o Alvo")
            
            # Verificar Status Editorial
            status_editorial = properties.get("Status Editorial", {})
            if status_editorial.get("type") != "select" or not status_editorial.get("select"):
                problemas_pagina.append("Status Editorial")
            
            if not problemas_pagina:
                pages_conformes += 1
            else:
                problemas_restantes.append({
                    "titulo": page_title[:50],
                    "problemas": problemas_pagina
                })
        
        conformidade = (pages_conformes / total_pages) * 100 if total_pages > 0 else 0
        
        print(f"üìä BIBLIOTECA EDITORIAL ALUNO - CONFORMIDADE FINAL:")
        print(f"   Total de p√°ginas: {total_pages}")
        print(f"   P√°ginas conformes: {pages_conformes}")
        print(f"   Conformidade: {conformidade:.1f}%")
        
        if problemas_restantes:
            print(f"\n‚ö†Ô∏è PROBLEMAS RESTANTES ({len(problemas_restantes)} p√°ginas):")
            for problema in problemas_restantes:
                print(f"   ‚Ä¢ {problema['titulo']}: {', '.join(problema['problemas'])}")
        else:
            print(f"\nüéâ PERFEITO! Todas as p√°ginas est√£o conformes!")
        
        return conformidade >= 95.0
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar conformidade: {str(e)}")
        return False

def configurar_nodejs_e_mcp():
    """Configurar Node.js e testar MCP YouTube"""
    print("\n‚öôÔ∏è Configurando Node.js e MCP YouTube...")
    
    # Verificar Node.js no diret√≥rio correto
    nodejs_path = r"C:\Program Files\nodejs"
    
    if os.path.exists(nodejs_path):
        print(f"‚úÖ Node.js encontrado em: {nodejs_path}")
        
        # Atualizar PATH
        current_path = os.environ.get("PATH", "")
        if nodejs_path not in current_path:
            os.environ["PATH"] = f"{nodejs_path};{current_path}"
            print(f"‚úÖ PATH atualizado")
        
        # Testar MCP YouTube
        config_file = "mcp_youtube_config.json"
        if os.path.exists(config_file):
            print(f"‚úÖ Configura√ß√£o MCP encontrada: {config_file}")
            
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                youtube_config = config.get("mcpServers", {}).get("youtube", {})
                api_key = youtube_config.get("env", {}).get("YOUTUBE_API_KEY")
                
                if api_key:
                    print(f"‚úÖ API Key configurada: {api_key[:10]}...")
                    print("‚ÑπÔ∏è Nota: API Key pode ter limita√ß√µes de cota")
                    return True
                else:
                    print("‚ùå API Key n√£o encontrada")
                    return False
            except Exception as e:
                print(f"‚ùå Erro ao ler configura√ß√£o: {str(e)}")
                return False
        else:
            print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_file}")
            return False
    else:
        print(f"‚ùå Node.js n√£o encontrado em: {nodejs_path}")
        return False

def main():
    print("="*80)
    print("CORRE√á√ÉO FINAL - P√ÅGINA SEM T√çTULO")
    print("="*80)
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Etapa 1: Corrigir p√°gina sem t√≠tulo
    if corrigir_pagina_sem_titulo():
        print("‚úÖ P√°gina sem t√≠tulo corrigida com sucesso!")
    else:
        print("‚ùå Falha ao corrigir p√°gina sem t√≠tulo")
    
    # Etapa 2: Verifica√ß√£o final de conformidade
    if verificar_conformidade_final():
        print("\nüéâ SUCESSO TOTAL: Conformidade atingiu 95% ou mais!")
    else:
        print("\n‚ö†Ô∏è Conformidade ainda pode ser melhorada")
    
    # Etapa 3: Configurar Node.js e MCP
    if configurar_nodejs_e_mcp():
        print("‚úÖ Node.js e MCP YouTube configurados corretamente!")
    else:
        print("‚ùå Problemas na configura√ß√£o do Node.js ou MCP")
    
    print("\n" + "="*80)
    print("CORRE√á√ÉO FINAL CONCLU√çDA")
    print("="*80)

if __name__ == "__main__":
    main()
