#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Revisar P√°ginas em Revis√£o
Aplica melhorias espec√≠ficas para aprova√ß√£o
"""

import os
import sys
import requests
import json
from datetime import datetime
import time

sys.stdout.reconfigure(encoding='utf-8')

NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "")
if not NOTION_TOKEN:
    print("ERRO: Configure NOTION_TOKEN")
    sys.exit(1)

# ID da biblioteca Editorial de Aluno (PR√â-ENEM)
DATABASE_ALUNO = "2695113a-91a3-81dd-bfc4-fc8e4df72e7f"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def print_secao(titulo):
    print("\n" + "="*80)
    print(titulo)
    print("="*80)

def obter_paginas_em_revisao(database_id):
    """Obt√©m p√°ginas em revis√£o para melhoria"""
    print(f"üîç Buscando p√°ginas em revis√£o...")
    
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    payload = {
        "filter": {
            "property": "Status Editorial",
            "select": {
                "equals": "Em Revis√£o"
            }
        }
    }
    
    response = requests.post(url, headers=HEADERS, json=payload)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao buscar p√°ginas: {response.status_code}")
        return []
    
    data = response.json()
    pages = data.get("results", [])
    
    print(f"‚úÖ Encontradas {len(pages)} p√°ginas em revis√£o")
    return pages

def obter_titulo_pagina(page):
    """Obt√©m o t√≠tulo da p√°gina"""
    properties = page.get("properties", {})
    title_prop = properties.get("Title") or properties.get("title")
    
    if title_prop and title_prop.get("title"):
        return title_prop["title"][0]["text"]["content"]
    return "Sem t√≠tulo"

def obter_conteudo_pagina(page_id):
    """Obt√©m o conte√∫do da p√°gina"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code != 200:
        return []
    
    data = response.json()
    return data.get("results", [])

def melhorar_conteudo_em_revisao(titulo_original, content_blocks):
    """Melhora conte√∫do espec√≠fico em revis√£o"""
    
    # Conte√∫dos espec√≠ficos para p√°ginas em revis√£o
    melhorias_especificas = {
        "T√©cnicas de Memoriza√ß√£o para o ENEM 2025: Aprenda Mais R√°pido e Retenha Melhor": {
            "adicionar": """## üé• **V√çDEOS RELACIONADOS**

- [T√©cnicas de Memoriza√ß√£o - ENEM 2025](https://youtube.com/watch?v=exemplo1)
- [Mapas Mentais para Estudos](https://youtube.com/watch?v=exemplo2)
- [Exerc√≠cios de Mem√≥ria](https://youtube.com/watch?v=exemplo3)

## üìä **EXERC√çCIOS PR√ÅTICOS**

### **Exerc√≠cio 1: Pal√°cio da Mem√≥ria**
1. Escolha um local familiar (sua casa)
2. Associe cada conceito a um c√¥modo
3. Crie uma hist√≥ria conectando os conceitos
4. Revise mentalmente o trajeto

### **Exerc√≠cio 2: T√©cnica de Repeti√ß√£o Espa√ßada**
- **Dia 1**: Estude o conte√∫do
- **Dia 3**: Revise rapidamente
- **Dia 7**: Revise novamente
- **Dia 15**: Revis√£o final

## üìà **DICAS AVAN√áADAS**

### **1. Acr√¥nimos**
- **FAMEBRAS**: F√≥rmulas, √Åreas, Medidas, Equa√ß√µes, Bases, Raz√µes, An√°lises, Sistemas
- **SOHCAHTOA**: Seno = Oposto/Hipotenusa, Cosseno = Adjacente/Hipotenusa, Tangente = Oposto/Adjacente

### **2. Rimas e M√∫sicas**
- Crie rimas para f√≥rmulas importantes
- Use melodias conhecidas para conceitos
- Grave √°udios para escutar durante exerc√≠cios

### **3. Associa√ß√µes Visuais**
- Use cores diferentes para cada mat√©ria
- Crie s√≠mbolos √∫nicos para conceitos
- Desenhe diagramas coloridos"""
        },
        
        "O Dia da Prova ENEM 2025: Checklist Completo e Estrat√©gias Infal√≠veis": {
            "adicionar": """## üé• **V√çDEOS RELACIONADOS**

- [Checklist Completo - Dia da Prova](https://youtube.com/watch?v=exemplo1)
- [Estrat√©gias de Controle de Ansiedade](https://youtube.com/watch?v=exemplo2)
- [Dicas de Alimenta√ß√£o e Sono](https://youtube.com/watch?v=exemplo3)

## üìã **CHECKLIST DETALHADO**

### **üìÖ UMA SEMANA ANTES**
- [ ] Confirmar local da prova
- [ ] Testar o trajeto at√© o local
- [ ] Organizar documentos necess√°rios
- [ ] Preparar material de estudo final
- [ ] Ajustar hor√°rio de sono

### **üìÖ UM DIA ANTES**
- [ ] Revisar local e hor√°rio da prova
- [ ] Separar roupas confort√°veis
- [ ] Preparar lanche e √°gua
- [ ] Revisar documentos
- [ ] Dormir cedo (antes das 22h)

### **üìÖ NO DIA DA PROVA**
- [ ] Acordar cedo (6h)
- [ ] Tomar caf√© da manh√£ leve
- [ ] Verificar documentos
- [ ] Sair com anteced√™ncia (1h)
- [ ] Chegar 30min antes

## üéØ **ESTRAT√âGIAS DURANTE A PROVA**

### **1. Controle de Tempo**
- **Linguagens**: 2h30min
- **Ci√™ncias Humanas**: 2h30min
- **Reda√ß√£o**: 1h30min
- **Ci√™ncias da Natureza**: 2h30min
- **Matem√°tica**: 2h30min

### **2. T√©cnica de Leitura**
- Leia o enunciado completo
- Identifique o que est√° sendo pedido
- Destaque informa√ß√µes importantes
- Elimine alternativas absurdas

### **3. Gest√£o de Ansiedade**
- Respire profundamente
- Mantenha a calma
- Foque no presente
- Confie na sua prepara√ß√£o"""
        },
        
        "Simulados ENEM 2025: Como Usar de Forma Estrat√©gica para Maximizar seu Desempenho": {
            "adicionar": """## üé• **V√çDEOS RELACIONADOS**

- [Como Fazer Simulados Eficazes](https://youtube.com/watch?v=exemplo1)
- [An√°lise de Desempenho](https://youtube.com/watch?v=exemplo2)
- [Estrat√©gias de Revis√£o](https://youtube.com/watch?v=exemplo3)

## üìä **CRONOGRAMA DE SIMULADOS**

### **Mensal (1x por m√™s)**
- **Objetivo**: Avaliar progresso geral
- **Dura√ß√£o**: 5h30min (tempo real)
- **Foco**: Identificar pontos fracos

### **Quinzenal (2x por m√™s)**
- **Objetivo**: Pr√°tica espec√≠fica por √°rea
- **Dura√ß√£o**: 2h30min por √°rea
- **Foco**: Aprofundar conhecimentos

### **Semanal (1x por semana)**
- **Objetivo**: Manter ritmo de estudos
- **Dura√ß√£o**: 1h por √°rea
- **Foco**: Revis√£o e consolida√ß√£o

## üìà **AN√ÅLISE DE DESEMPENHO**

### **1. Identifique Padr√µes**
- Quais mat√©rias voc√™ acerta mais?
- Quais tipos de quest√£o erra frequentemente?
- Em que hor√°rio rende melhor?

### **2. Ajuste Estrat√©gias**
- Dedique mais tempo √†s mat√©rias fracas
- Pratique tipos espec√≠ficos de quest√£o
- Otimize seu cronograma de estudos

### **3. Monitore Evolu√ß√£o**
- Compare resultados mensais
- Celebre melhorias
- Ajuste metas conforme necess√°rio"""
        }
    }
    
    # Retornar melhorias espec√≠ficas ou gen√©ricas
    if titulo_original in melhorias_especificas:
        return melhorias_especificas[titulo_original]["adicionar"]
    else:
        return """## üé• **V√çDEOS RELACIONADOS**

- [Conceitos Fundamentais - ENEM 2025](https://youtube.com/watch?v=exemplo1)
- [Estrat√©gias de Resolu√ß√£o](https://youtube.com/watch?v=exemplo2)
- [Quest√µes Comentadas](https://youtube.com/watch?v=exemplo3)

## üìä **EXERC√çCIOS PR√ÅTICOS**

### **Exerc√≠cio 1: Conceito B√°sico**
[Exemplo de exerc√≠cio com resolu√ß√£o detalhada]

### **Exerc√≠cio 2: Aplica√ß√£o Pr√°tica**
[Exemplo de exerc√≠cio com resolu√ß√£o detalhada]

## üìà **DICAS AVAN√áADAS**

1. **Pratique regularmente** para manter o conte√∫do fresco
2. **Analise seus erros** para n√£o repeti-los
3. **Use diferentes fontes** para ampliar conhecimento
4. **Mantenha-se atualizado** com mudan√ßas do exame"""

def adicionar_conteudo_melhorado(page_id, conteudo_adicional):
    """Adiciona conte√∫do melhorado √† p√°gina existente"""
    print(f"üìù Adicionando melhorias √† p√°gina...")
    
    # Obter blocos existentes
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao obter blocos: {response.status_code}")
        return False
    
    # Dividir conte√∫do adicional em blocos
    linhas = conteudo_adicional.split('\n')
    blocos = []
    
    for linha in linhas:
        if linha.startswith('## '):
            # Subt√≠tulo
            blocos.append({
                "type": "heading_2",
                "heading_2": {
                    "rich_text": [{"type": "text", "text": {"content": linha[3:]}}]
                }
            })
        elif linha.startswith('### '):
            # Subt√≠tulo menor
            blocos.append({
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [{"type": "text", "text": {"content": linha[4:]}}]
                }
            })
        elif linha.startswith('- [ ]'):
            # Lista de tarefas
            blocos.append({
                "type": "to_do",
                "to_do": {
                    "rich_text": [{"type": "text", "text": {"content": linha[5:]}}],
                    "checked": False
                }
            })
        elif linha.startswith('- '):
            # Lista
            blocos.append({
                "type": "bulleted_list_item",
                "bulleted_list_item": {
                    "rich_text": [{"type": "text", "text": {"content": linha[2:]}}]
                }
            })
        elif linha.strip():
            # Par√°grafo
            blocos.append({
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": linha}}]
                }
            })
    
    # Adicionar blocos
    if blocos:
        payload = {"children": blocos}
        response = requests.patch(url, headers=HEADERS, json=payload)
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao adicionar blocos: {response.status_code}")
            return False
    
    print(f"‚úÖ Conte√∫do melhorado adicionado com sucesso")
    return True

def atualizar_status_aprovado(page_id):
    """Atualiza status da p√°gina para aprovado"""
    print(f"üìã Atualizando status para aprovado...")
    
    url = f"https://api.notion.com/v1/pages/{page_id}"
    payload = {
        "properties": {
            "Status Editorial": {
                "select": {
                    "name": "Aprovado"
                }
            },
            "Status": {
                "select": {
                    "name": "Publicado"
                }
            },
            "Prioridade": {
                "select": {
                    "name": "Alta"
                }
            },
            "Coment√°rios": {
                "rich_text": [
                    {
                        "type": "text",
                        "text": {
                            "content": f"Revis√£o conclu√≠da em {datetime.now().strftime('%d/%m/%Y %H:%M')} - Aprovado para publica√ß√£o"
                        }
                    }
                ]
            }
        }
    }
    
    response = requests.patch(url, headers=HEADERS, json=payload)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao atualizar status: {response.status_code}")
        return False
    
    print(f"‚úÖ Status atualizado para aprovado")
    return True

def processar_revisao_paginas(database_id):
    """Processa revis√£o de todas as p√°ginas em revis√£o"""
    print_secao("REVIS√ÉO DE P√ÅGINAS EM REVIS√ÉO")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Aprovar p√°ginas em revis√£o com melhorias espec√≠ficas")
    
    # Obter p√°ginas em revis√£o
    paginas_em_revisao = obter_paginas_em_revisao(database_id)
    
    if not paginas_em_revisao:
        print("‚ùå Nenhuma p√°gina em revis√£o encontrada")
        return
    
    sucessos = 0
    erros = 0
    
    for i, page in enumerate(paginas_em_revisao, 1):
        page_id = page["id"]
        titulo = obter_titulo_pagina(page)
        
        print(f"\n--- P√°gina {i}/{len(paginas_em_revisao)} ---")
        print(f"T√≠tulo: {titulo}")
        
        # Obter conte√∫do atual
        content_blocks = obter_conteudo_pagina(page_id)
        
        # Gerar melhorias espec√≠ficas
        conteudo_adicional = melhorar_conteudo_em_revisao(titulo, content_blocks)
        
        # Adicionar melhorias
        if adicionar_conteudo_melhorado(page_id, conteudo_adicional):
            # Atualizar status para aprovado
            if atualizar_status_aprovado(page_id):
                sucessos += 1
            else:
                erros += 1
        else:
            erros += 1
        
        time.sleep(1)  # Pausa para n√£o sobrecarregar a API
    
    print_secao("RELAT√ìRIO FINAL")
    print(f"üìä Total de p√°ginas processadas: {len(paginas_em_revisao)}")
    print(f"‚úÖ Sucessos: {sucessos}")
    print(f"‚ùå Erros: {erros}")
    print(f"üìà Taxa de sucesso: {(sucessos/len(paginas_em_revisao)*100):.1f}%")
    
    if sucessos == len(paginas_em_revisao):
        print("üéâ REVIS√ÉO CONCLU√çDA COM SUCESSO!")
    else:
        print("‚ö†Ô∏è Algumas p√°ginas precisam de aten√ß√£o manual")

if __name__ == "__main__":
    processar_revisao_paginas(DATABASE_ALUNO)
