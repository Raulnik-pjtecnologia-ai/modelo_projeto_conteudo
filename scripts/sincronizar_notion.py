#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Sincroniza√ß√£o com Notion
Sincroniza conte√∫do local com o database do Notion
"""

import os
import json
import time
from pathlib import Path
from datetime import datetime
from notion_client import Client

def carregar_configuracao():
    """Carrega configura√ß√£o do projeto"""
    try:
        with open('config/config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        return config
    except Exception as e:
        print(f"‚ùå Erro ao carregar configura√ß√£o: {e}")
        return None

def conectar_notion(config):
    """Conecta com a API do Notion"""
    try:
        notion = Client(auth=config['notion']['token'])
        print("‚úÖ Conex√£o com Notion estabelecida!")
        return notion
    except Exception as e:
        print(f"‚ùå Erro ao conectar com Notion: {e}")
        return None

def obter_categorias_disponiveis(notion, config):
    """Obt√©m categorias dispon√≠veis no database"""
    try:
        print("üè∑Ô∏è  Obtendo categorias dispon√≠veis...")
        response = notion.databases.query(database_id=config['notion']['categorias_database_id'])
        categorias = response['results']
        
        mapeamento_categorias = {}
        for categoria in categorias:
            props = categoria.get('properties', {})
            nome = ""
            if 'Name' in props and 'title' in props['Name']:
                nome = props['Name']['title'][0]['text']['content'] if props['Name']['title'] else ""
            elif 'T√≠tulo' in props and 'title' in props['T√≠tulo']:
                nome = props['T√≠tulo']['title'][0]['text']['content'] if props['T√≠tulo']['title'] else ""
            
            if nome:
                mapeamento_categorias[nome] = categoria['id']
        
        print(f"   üè∑Ô∏è  {len(mapeamento_categorias)} categorias encontradas")
        return mapeamento_categorias
    except Exception as e:
        print(f"‚ùå Erro ao obter categorias: {e}")
        return {}

def determinar_tipo_conteudo(titulo):
    """Determina o tipo de conte√∫do baseado no t√≠tulo"""
    titulo_lower = titulo.lower()
    
    if 'checklist' in titulo_lower:
        return 'Checklist'
    elif 'li√ß√£o' in titulo_lower or 'licao' in titulo_lower:
        return 'Li√ß√£o'
    elif 'artigo' in titulo_lower:
        return 'Artigo'
    elif 'v√≠deo' in titulo_lower or 'video' in titulo_lower:
        return 'V√≠deo'
    elif 'documento' in titulo_lower:
        return 'Documento Oficial'
    elif 'apresenta√ß√£o' in titulo_lower or 'apresentacao' in titulo_lower:
        return 'Apresenta√ß√£o'
    else:
        return 'Artigo'

def determinar_funcao(categorias_relevantes, config):
    """Determina a fun√ß√£o baseada nas categorias"""
    if not categorias_relevantes:
        return ['Gest√£o']
    
    funcoes_disponiveis = config.get('funcoes', ['Gest√£o'])
    funcoes = []
    
    for categoria, score in categorias_relevantes:
        if categoria in funcoes_disponiveis:
            funcoes.append(categoria)
    
    return funcoes[:3] if funcoes else ['Gest√£o']

def determinar_nivel_profundidade(titulo, categorias_relevantes):
    """Determina o n√≠vel de profundidade"""
    titulo_lower = titulo.lower()
    
    if 'b√°sico' in titulo_lower or 'introdu√ß√£o' in titulo_lower:
        return ['B√°sico']
    elif 'avan√ßado' in titulo_lower or 'especializado' in titulo_lower:
        return ['Avan√ßado']
    elif 'intermedi√°rio' in titulo_lower or 'intermediario' in titulo_lower:
        return ['Intermedi√°rio']
    else:
        if categorias_relevantes and categorias_relevantes[0][1] > 20:
            return ['Avan√ßado']
        elif categorias_relevantes and categorias_relevantes[0][1] > 10:
            return ['Intermedi√°rio']
        else:
            return ['B√°sico']

def sincronizar_pagina(notion, config, resultado, mapeamento_categorias):
    """Sincroniza uma p√°gina individual"""
    page_id = resultado['page_id']
    propriedades = resultado['propriedades']
    categorias_relevantes = resultado.get('categorias_relevantes', [])
    
    titulo = propriedades.get('titulo', 'Sem t√≠tulo')
    
    propriedades_atualizadas = {}
    
    # Atualizar Tipo
    tipo_sugerido = determinar_tipo_conteudo(titulo)
    propriedades_atualizadas['Tipo'] = {
        'select': {
            'name': tipo_sugerido
        }
    }
    
    # Atualizar Fun√ß√£o
    funcoes = determinar_funcao(categorias_relevantes, config)
    propriedades_atualizadas['Fun√ß√£o '] = {
        'multi_select': [{'name': funcao} for funcao in funcoes]
    }
    
    # Atualizar N√≠vel de profundidade
    nivel = determinar_nivel_profundidade(titulo, categorias_relevantes)
    propriedades_atualizadas['N√≠vel de profundidade'] = {
        'multi_select': [{'name': n} for n in nivel]
    }
    
    # Atualizar Tags
    tags = [categoria for categoria, _ in categorias_relevantes[:3]]
    if tags:
        propriedades_atualizadas['Tags'] = {
            'multi_select': [{'name': tag} for tag in tags]
        }
    
    # Atualizar Status editorial
    propriedades_atualizadas['Status editorial'] = {
        'status': {
            'name': 'Publicado'
        }
    }
    
    # Criar rela√ß√µes com categorias
    if categorias_relevantes and mapeamento_categorias:
        categorias_ids = []
        
        for categoria_auto, score in categorias_relevantes[:3]:
            if categoria_auto in mapeamento_categorias:
                categoria_id = mapeamento_categorias[categoria_auto]
                categorias_ids.append(categoria_id)
        
        if categorias_ids:
            propriedades_atualizadas['Categoria'] = {
                'relation': [{'id': cat_id} for cat_id in categorias_ids]
            }
    
    # Atualizar p√°gina
    try:
        notion.pages.update(
            page_id=page_id,
            properties=propriedades_atualizadas
        )
        return True
    except Exception as e:
        print(f"   ‚ùå Erro ao atualizar: {e}")
        return False

def processar_sincronizacao(notion, config, mapeamento_categorias):
    """Processa a sincroniza√ß√£o de todas as p√°ginas"""
    print("üîÑ Iniciando sincroniza√ß√£o com Notion...")
    
    # Buscar p√°ginas no database
    try:
        response = notion.databases.query(database_id=config['notion']['database_id'])
        paginas = response['results']
        
        resultados = {
            'total_processadas': 0,
            'sucessos': 0,
            'erros': 0
        }
        
        for i, pagina in enumerate(paginas, 1):
            page_id = pagina['id']
            props = pagina.get('properties', {})
            
            # Extrair t√≠tulo
            titulo = ""
            if 'Name' in props and 'title' in props['Name']:
                titulo = props['Name']['title'][0]['text']['content'] if props['Name']['title'] else ""
            elif 'T√≠tulo' in props and 'title' in props['T√≠tulo']:
                titulo = props['T√≠tulo']['title'][0]['text']['content'] if props['T√≠tulo']['title'] else ""
            
            print(f"üîç [{i}/{len(paginas)}] Sincronizando: {titulo[:50]}...")
            
            # Criar resultado para sincroniza√ß√£o
            resultado = {
                'page_id': page_id,
                'propriedades': {'titulo': titulo},
                'categorias_relevantes': []
            }
            
            if sincronizar_pagina(notion, config, resultado, mapeamento_categorias):
                resultados['sucessos'] += 1
                print(f"   ‚úÖ Sincronizado com sucesso")
            else:
                resultados['erros'] += 1
                print(f"   ‚ùå Erro na sincroniza√ß√£o")
            
            resultados['total_processadas'] += 1
            print()
            time.sleep(0.3)
        
        return resultados
        
    except Exception as e:
        print(f"‚ùå Erro ao processar sincroniza√ß√£o: {e}")
        return None

def main():
    """Fun√ß√£o principal"""
    print("üîÑ SINCRONIZA√á√ÉO COM NOTION")
    print("="*50)
    
    # Carregar configura√ß√£o
    config = carregar_configuracao()
    if not config:
        return
    
    # Conectar com Notion
    notion = conectar_notion(config)
    if not notion:
        return
    
    # Obter categorias dispon√≠veis
    mapeamento_categorias = obter_categorias_disponiveis(notion, config)
    
    # Processar sincroniza√ß√£o
    resultados = processar_sincronizacao(notion, config, mapeamento_categorias)
    
    if resultados:
        # Exibir resumo final
        print("="*50)
        print("üìä RESUMO FINAL DA SINCRONIZA√á√ÉO")
        print("="*50)
        print(f"üìÑ Total de p√°ginas processadas: {resultados['total_processadas']}")
        print(f"‚úÖ Sucessos: {resultados['sucessos']}")
        print(f"‚ùå Erros: {resultados['erros']}")
        print(f"üìä Taxa de sucesso: {(resultados['sucessos']/resultados['total_processadas']*100):.1f}%")
        print("\nüéâ SINCRONIZA√á√ÉO CONCLU√çDA!")

if __name__ == "__main__":
    main()
