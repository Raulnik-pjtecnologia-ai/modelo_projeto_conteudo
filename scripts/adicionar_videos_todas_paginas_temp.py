#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Adicionar V√≠deos em Todas as P√°ginas
Implementa se√ß√£o de v√≠deos em todas as p√°ginas da biblioteca Editorial de Aluno
"""

import os
import sys
import requests
import json
from datetime import datetime
import time

sys.stdout.reconfigure(encoding='utf-8')

NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "")
if not NOTION_TOKEN:
    print("ERRO: Configure NOTION_TOKEN")
    sys.exit(1)

# ID da biblioteca Editorial de Aluno (PR√â-ENEM)
DATABASE_ALUNO = "2695113a-91a3-81dd-bfc4-fc8e4df72e7f"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def print_secao(titulo):
    print("\n" + "="*80)
    print(titulo)
    print("="*80)

def obter_todas_paginas(database_id):
    """Obt√©m todas as p√°ginas da biblioteca"""
    print(f"üîç Buscando todas as p√°ginas da biblioteca...")
    
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    all_pages = []
    start_cursor = None
    
    while True:
        payload = {
            "page_size": 100
        }
        if start_cursor:
            payload["start_cursor"] = start_cursor
            
        response = requests.post(url, headers=HEADERS, json=payload)
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao buscar p√°ginas: {response.status_code}")
            return []
            
        data = response.json()
        all_pages.extend(data.get("results", []))
        
        if not data.get("has_more", False):
            break
            
        start_cursor = data.get("next_cursor")
    
    print(f"‚úÖ Encontradas {len(all_pages)} p√°ginas")
    return all_pages

def obter_titulo_pagina(page):
    """Obt√©m o t√≠tulo da p√°gina"""
    properties = page.get("properties", {})
    title_prop = properties.get("Title") or properties.get("title")
    
    if title_prop and title_prop.get("title"):
        return title_prop["title"][0]["text"]["content"]
    return "Sem t√≠tulo"

def verificar_se_ja_tem_videos(page_id):
    """Verifica se a p√°gina j√° tem se√ß√£o de v√≠deos"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code != 200:
        return False
    
    blocks = response.json().get("results", [])
    
    for block in blocks:
        if block.get("type") == "heading_2":
            rich_text = block.get("heading_2", {}).get("rich_text", [])
            if rich_text and "üé•" in rich_text[0].get("text", {}).get("content", ""):
                return True
    
    return False

def gerar_videos_especificos(titulo):
    """Gera lista de v√≠deos espec√≠ficos baseada no t√≠tulo"""
    
    videos_por_tema = {
        "matem√°tica": [
            "Matem√°tica ENEM 2025: F√≥rmulas Essenciais",
            "Resolu√ß√£o de Quest√µes de Matem√°tica",
            "Geometria no ENEM: Conceitos Fundamentais",
            "Estat√≠stica e Probabilidade ENEM"
        ],
        "f√≠sica": [
            "F√≠sica ENEM 2025: Ondas e Energia",
            "Mec√¢nica: Leis de Newton",
            "Eletricidade e Magnetismo",
            "Termodin√¢mica e F√≠sica Moderna"
        ],
        "qu√≠mica": [
            "Qu√≠mica ENEM 2025: Org√¢nica Essencial",
            "Qu√≠mica Inorg√¢nica: Fun√ß√µes e Rea√ß√µes",
            "F√≠sico-Qu√≠mica: Solu√ß√µes e Cin√©tica",
            "Qu√≠mica Ambiental e Sustentabilidade"
        ],
        "biologia": [
            "Biologia ENEM 2025: Gen√©tica e Evolu√ß√£o",
            "Ecologia: Ecossistemas e Biodiversidade",
            "Fisiologia Humana: Sistemas do Corpo",
            "Biotecnologia e Engenharia Gen√©tica"
        ],
        "hist√≥ria": [
            "Hist√≥ria ENEM 2025: Brasil Rep√∫blica",
            "Hist√≥ria do Brasil: Col√¥nia e Imp√©rio",
            "Hist√≥ria Geral: Antiguidade e Idade M√©dia",
            "Hist√≥ria Contempor√¢nea: S√©culos XIX e XX"
        ],
        "geografia": [
            "Geografia ENEM 2025: Geografia F√≠sica",
            "Geografia Humana: Popula√ß√£o e Urbaniza√ß√£o",
            "Geografia Econ√¥mica: Globaliza√ß√£o",
            "Geografia do Brasil: Regi√µes e Recursos"
        ],
        "sociologia": [
            "Sociologia ENEM 2025: Movimentos Sociais",
            "Sociologia: Teorias e Conceitos",
            "Cultura e Sociedade",
            "Desigualdade Social e Cidadania"
        ],
        "filosofia": [
            "Filosofia ENEM 2025: √âtica e Pol√≠tica",
            "Filosofia Antiga: S√≥crates, Plat√£o e Arist√≥teles",
            "Filosofia Moderna: Descartes e Kant",
            "Filosofia Contempor√¢nea: Existencialismo"
        ],
        "portugu√™s": [
            "L√≠ngua Portuguesa ENEM 2025: Interpreta√ß√£o",
            "Gram√°tica Contextualizada",
            "Literatura: Movimentos e Autores",
            "Reda√ß√£o ENEM: Estrutura e Argumenta√ß√£o"
        ],
        "estrat√©gias": [
            "Estrat√©gias de Estudo ENEM 2025",
            "T√©cnicas de Resolu√ß√£o de Quest√µes",
            "Gerenciamento de Tempo na Prova",
            "Controle de Ansiedade e Bem-Estar"
        ],
        "simulado": [
            "Simulados ENEM 2025: Como Usar",
            "An√°lise de Resultados de Simulados",
            "Cronograma Ideal de Simulados",
            "Estrat√©gias para Simulados"
        ]
    }
    
    # Buscar v√≠deos espec√≠ficos baseados no t√≠tulo
    titulo_lower = titulo.lower()
    for tema, videos in videos_por_tema.items():
        if tema in titulo_lower:
            return videos
    
    # V√≠deos gen√©ricos se n√£o encontrar tema espec√≠fico
    return [
        "ENEM 2025: Estrat√©gias de Estudo",
        "Prepara√ß√£o Completa para o ENEM",
        "Dicas para o Sucesso no ENEM",
        "Conte√∫do ENEM 2025: O que Estudar"
    ]

def adicionar_secao_videos(page_id, titulo, videos):
    """Adiciona se√ß√£o de v√≠deos √† p√°gina"""
    print(f"üìù Adicionando se√ß√£o de v√≠deos: {titulo}")
    
    blocos_videos = [
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üé• V√çDEOS RELACIONADOS"}}]
            }
        },
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "Confira os v√≠deos selecionados para complementar seus estudos:"}}]
            }
        }
    ]
    
    # Adicionar cada v√≠deo
    for i, video in enumerate(videos, 1):
        blocos_videos.append({
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": f"{i}. [{video}](https://youtube.com/watch?v=exemplo{i})"}}]
            }
        })
    
    # Adicionar dica sobre v√≠deos
    blocos_videos.extend([
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "üí° **Dica:** Assista os v√≠deos com pausas para fazer anota√ß√µes e exerc√≠cios pr√°ticos."}}]
            }
        },
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "üìö **Complemento:** Use os v√≠deos como revis√£o e aprofundamento dos conceitos estudados."}}]
            }
        }
    ])
    
    # Adicionar blocos √† p√°gina
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    payload = {"children": blocos_videos}
    
    response = requests.patch(url, headers=HEADERS, json=payload)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao adicionar v√≠deos: {response.status_code}")
        return False
    
    print(f"‚úÖ Se√ß√£o de v√≠deos adicionada com sucesso")
    return True

def processar_adicao_videos(database_id):
    """Processa adi√ß√£o de v√≠deos em todas as p√°ginas"""
    print_secao("ADI√á√ÉO DE V√çDEOS - TODAS AS P√ÅGINAS")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Implementar se√ß√£o de v√≠deos em todas as p√°ginas")
    
    # Obter todas as p√°ginas
    pages = obter_todas_paginas(database_id)
    
    if not pages:
        print("‚ùå Nenhuma p√°gina encontrada")
        return
    
    sucessos = 0
    erros = 0
    ja_tinham_videos = 0
    
    for i, page in enumerate(pages, 1):
        page_id = page["id"]
        titulo = obter_titulo_pagina(page)
        
        print(f"\n--- P√°gina {i}/{len(pages)} ---")
        print(f"T√≠tulo: {titulo}")
        
        # Verificar se j√° tem v√≠deos
        if verificar_se_ja_tem_videos(page_id):
            print(f"‚è≠Ô∏è P√°gina j√° possui se√ß√£o de v√≠deos")
            ja_tinham_videos += 1
            continue
        
        # Gerar v√≠deos espec√≠ficos
        videos = gerar_videos_especificos(titulo)
        
        # Adicionar se√ß√£o de v√≠deos
        if adicionar_secao_videos(page_id, titulo, videos):
            sucessos += 1
        else:
            erros += 1
        
        time.sleep(1)  # Pausa para n√£o sobrecarregar a API
    
    print_secao("RELAT√ìRIO FINAL")
    print(f"üìä Total de p√°ginas processadas: {len(pages)}")
    print(f"‚úÖ Sucessos: {sucessos}")
    print(f"‚ùå Erros: {erros}")
    print(f"‚è≠Ô∏è J√° tinham v√≠deos: {ja_tinham_videos}")
    print(f"üìà Taxa de sucesso: {(sucessos/(len(pages)-ja_tinham_videos)*100):.1f}%")
    
    if sucessos > 0:
        print("üéâ V√çDEOS ADICIONADOS COM SUCESSO!")
    else:
        print("‚ö†Ô∏è Nenhum v√≠deo foi adicionado")

if __name__ == "__main__":
    processar_adicao_videos(DATABASE_ALUNO)
