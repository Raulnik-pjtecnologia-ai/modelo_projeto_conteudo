#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Adicionar Exerc√≠cios Pr√°ticos
Adiciona se√ß√£o de exerc√≠cios pr√°ticos em todas as p√°ginas da biblioteca
"""

import os
import sys
import requests
import json
from datetime import datetime
import time

sys.stdout.reconfigure(encoding='utf-8')

NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "")
if not NOTION_TOKEN:
    print("ERRO: Configure NOTION_TOKEN")
    sys.exit(1)

# ID da biblioteca Editorial de Aluno (PR√â-ENEM)
DATABASE_ALUNO = "2695113a-91a3-81dd-bfc4-fc8e4df72e7f"

HEADERS = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def print_secao(titulo):
    print("\n" + "="*80)
    print(titulo)
    print("="*80)

def obter_todas_paginas(database_id):
    """Obt√©m todas as p√°ginas da biblioteca"""
    print(f"üîç Buscando todas as p√°ginas da biblioteca...")
    
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    all_pages = []
    start_cursor = None
    
    while True:
        payload = {
            "page_size": 100
        }
        if start_cursor:
            payload["start_cursor"] = start_cursor
            
        response = requests.post(url, headers=HEADERS, json=payload)
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao buscar p√°ginas: {response.status_code}")
            return []
            
        data = response.json()
        all_pages.extend(data.get("results", []))
        
        if not data.get("has_more", False):
            break
            
        start_cursor = data.get("next_cursor")
    
    print(f"‚úÖ Encontradas {len(all_pages)} p√°ginas")
    return all_pages

def obter_titulo_pagina(page):
    """Obt√©m o t√≠tulo da p√°gina"""
    properties = page.get("properties", {})
    title_prop = properties.get("Title") or properties.get("title")
    
    if title_prop and title_prop.get("title"):
        return title_prop["title"][0]["text"]["content"]
    return "Sem t√≠tulo"

def verificar_se_ja_tem_exercicios(page_id):
    """Verifica se a p√°gina j√° tem se√ß√£o de exerc√≠cios"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    response = requests.get(url, headers=HEADERS)
    
    if response.status_code != 200:
        return False
    
    blocks = response.json().get("results", [])
    
    for block in blocks:
        if block.get("type") == "heading_2":
            rich_text = block.get("heading_2", {}).get("rich_text", [])
            if rich_text and "üìà" in rich_text[0].get("text", {}).get("content", ""):
                return True
    
    return False

def gerar_exercicios_especificos(titulo):
    """Gera exerc√≠cios espec√≠ficos baseados no t√≠tulo"""
    
    exercicios_por_tema = {
        "matem√°tica": [
            {
                "titulo": "Exerc√≠cio 1: C√°lculo de √Årea",
                "enunciado": "Calcule a √°rea de um ret√¢ngulo com base 8 cm e altura 6 cm.",
                "resolucao": "√Årea = base √ó altura = 8 √ó 6 = 48 cm¬≤"
            },
            {
                "titulo": "Exerc√≠cio 2: Regra de Tr√™s",
                "enunciado": "Se 3 oper√°rios fazem um trabalho em 12 dias, em quantos dias 4 oper√°rios far√£o o mesmo trabalho?",
                "resolucao": "3 oper√°rios ‚Üí 12 dias\n4 oper√°rios ‚Üí x dias\n3 √ó 12 = 4 √ó x\nx = 9 dias"
            }
        ],
        "f√≠sica": [
            {
                "titulo": "Exerc√≠cio 1: Velocidade M√©dia",
                "enunciado": "Um carro percorre 300 km em 4 horas. Qual sua velocidade m√©dia?",
                "resolucao": "v = Œîs/Œît = 300/4 = 75 km/h"
            },
            {
                "titulo": "Exerc√≠cio 2: Energia Cin√©tica",
                "enunciado": "Calcule a energia cin√©tica de um objeto de 2 kg a 10 m/s.",
                "resolucao": "Ec = mv¬≤/2 = 2 √ó 10¬≤/2 = 100 J"
            }
        ],
        "qu√≠mica": [
            {
                "titulo": "Exerc√≠cio 1: Massa Molar",
                "enunciado": "Calcule a massa molar do H2SO4 (H=1, S=32, O=16).",
                "resolucao": "M = 2√ó1 + 1√ó32 + 4√ó16 = 2 + 32 + 64 = 98 g/mol"
            },
            {
                "titulo": "Exerc√≠cio 2: Concentra√ß√£o",
                "enunciado": "Qual a concentra√ß√£o de uma solu√ß√£o com 20 g de soluto em 500 mL de solvente?",
                "resolucao": "C = m/V = 20/0,5 = 40 g/L"
            }
        ],
        "biologia": [
            {
                "titulo": "Exerc√≠cio 1: Gen√©tica",
                "enunciado": "Um casal heterozigoto (Aa) tem filhos. Qual a probabilidade de ter um filho homozigoto recessivo (aa)?",
                "resolucao": "Aa √ó Aa ‚Üí 1/4 AA, 1/2 Aa, 1/4 aa\nProbabilidade de aa = 1/4 = 25%"
            },
            {
                "titulo": "Exerc√≠cio 2: Ecologia",
                "enunciado": "Em uma cadeia alimentar: planta ‚Üí gafanhoto ‚Üí p√°ssaro ‚Üí cobra. Qual o n√≠vel tr√≥fico do p√°ssaro?",
                "resolucao": "Planta (produtor) ‚Üí Gafanhoto (1¬∫ consumidor) ‚Üí P√°ssaro (2¬∫ consumidor) ‚Üí Cobra (3¬∫ consumidor)"
            }
        ],
        "hist√≥ria": [
            {
                "titulo": "Exerc√≠cio 1: Brasil Rep√∫blica",
                "enunciado": "Qual foi o principal objetivo da Revolu√ß√£o de 1930?",
                "resolucao": "A Revolu√ß√£o de 1930 teve como objetivo principal derrubar a Rep√∫blica Velha e implementar reformas pol√≠ticas e sociais."
            },
            {
                "titulo": "Exerc√≠cio 2: Era Vargas",
                "enunciado": "Cite duas principais caracter√≠sticas do Estado Novo (1937-1945).",
                "resolucao": "1) Centraliza√ß√£o do poder nas m√£os de Vargas\n2) Censura √† imprensa e repress√£o pol√≠tica"
            }
        ],
        "geografia": [
            {
                "titulo": "Exerc√≠cio 1: Clima",
                "enunciado": "Qual o tipo clim√°tico predominante na regi√£o Nordeste do Brasil?",
                "resolucao": "O clima semi√°rido √© predominante no interior do Nordeste, caracterizado por chuvas escassas e irregulares."
            },
            {
                "titulo": "Exerc√≠cio 2: Popula√ß√£o",
                "enunciado": "O que √© densidade demogr√°fica?",
                "resolucao": "Densidade demogr√°fica √© a rela√ß√£o entre o n√∫mero de habitantes e a √°rea do territ√≥rio (hab/km¬≤)."
            }
        ],
        "sociologia": [
            {
                "titulo": "Exerc√≠cio 1: Movimentos Sociais",
                "enunciado": "Qual a principal caracter√≠stica dos movimentos sociais?",
                "resolucao": "A principal caracter√≠stica √© a a√ß√£o coletiva organizada para transformar a sociedade e reivindicar direitos."
            },
            {
                "titulo": "Exerc√≠cio 2: Desigualdade",
                "enunciado": "Cite dois tipos de desigualdade social.",
                "resolucao": "1) Desigualdade econ√¥mica (renda e riqueza)\n2) Desigualdade de oportunidades (educa√ß√£o e sa√∫de)"
            }
        ],
        "portugu√™s": [
            {
                "titulo": "Exerc√≠cio 1: Interpreta√ß√£o",
                "enunciado": "Leia o texto e identifique a ideia principal: 'A educa√ß√£o √© fundamental para o desenvolvimento social.'",
                "resolucao": "A ideia principal √© que a educa√ß√£o √© essencial para o progresso da sociedade."
            },
            {
                "titulo": "Exerc√≠cio 2: Gram√°tica",
                "enunciado": "Classifique a palavra 'rapidamente' na frase: 'Ele correu rapidamente.'",
                "resolucao": "'Rapidamente' √© um adv√©rbio de modo, modificando o verbo 'correu'."
            }
        ]
    }
    
    # Buscar exerc√≠cios espec√≠ficos baseados no t√≠tulo
    titulo_lower = titulo.lower()
    for tema, exercicios in exercicios_por_tema.items():
        if tema in titulo_lower:
            return exercicios
    
    # Exerc√≠cios gen√©ricos se n√£o encontrar tema espec√≠fico
    return [
        {
            "titulo": "Exerc√≠cio 1: Aplica√ß√£o Pr√°tica",
            "enunciado": "Aplique os conceitos estudados em uma situa√ß√£o pr√°tica do seu cotidiano.",
            "resolucao": "Analise como os conceitos se relacionam com situa√ß√µes reais e pratique sua aplica√ß√£o."
        },
        {
            "titulo": "Exerc√≠cio 2: S√≠ntese",
            "enunciado": "Fa√ßa um resumo dos principais pontos estudados neste conte√∫do.",
            "resolucao": "Organize as informa√ß√µes de forma clara e objetiva, destacando os conceitos mais importantes."
        }
    ]

def adicionar_secao_exercicios(page_id, titulo, exercicios):
    """Adiciona se√ß√£o de exerc√≠cios pr√°ticos √† p√°gina"""
    print(f"üìù Adicionando se√ß√£o de exerc√≠cios: {titulo}")
    
    blocos_exercicios = [
        {
            "type": "heading_2",
            "heading_2": {
                "rich_text": [{"type": "text", "text": {"content": "üìà EXERC√çCIOS PR√ÅTICOS"}}]
            }
        },
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "Pratique os conceitos estudados com os exerc√≠cios abaixo:"}}]
            }
        }
    ]
    
    # Adicionar cada exerc√≠cio
    for exercicio in exercicios:
        blocos_exercicios.extend([
            {
                "type": "heading_3",
                "heading_3": {
                    "rich_text": [{"type": "text", "text": {"content": exercicio["titulo"]}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Enunciado:** {exercicio['enunciado']}"}}]
                }
            },
            {
                "type": "paragraph",
                "paragraph": {
                    "rich_text": [{"type": "text", "text": {"content": f"**Resolu√ß√£o:** {exercicio['resolucao']}"}}]
                }
            }
        ])
    
    # Adicionar dicas sobre exerc√≠cios
    blocos_exercicios.extend([
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "üí° **Dica:** Tente resolver os exerc√≠cios antes de ver a resolu√ß√£o."}}]
            }
        },
        {
            "type": "paragraph",
            "paragraph": {
                "rich_text": [{"type": "text", "text": {"content": "üìö **Complemento:** Crie seus pr√≥prios exerc√≠cios baseados nos conceitos estudados."}}]
            }
        }
    ])
    
    # Adicionar blocos √† p√°gina
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    payload = {"children": blocos_exercicios}
    
    response = requests.patch(url, headers=HEADERS, json=payload)
    
    if response.status_code != 200:
        print(f"‚ùå Erro ao adicionar exerc√≠cios: {response.status_code}")
        return False
    
    print(f"‚úÖ Se√ß√£o de exerc√≠cios adicionada com sucesso")
    return True

def processar_adicao_exercicios(database_id):
    """Processa adi√ß√£o de exerc√≠cios em todas as p√°ginas"""
    print_secao("ADI√á√ÉO DE EXERC√çCIOS PR√ÅTICOS")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Implementar se√ß√£o de exerc√≠cios pr√°ticos em todas as p√°ginas")
    
    # Obter todas as p√°ginas
    pages = obter_todas_paginas(database_id)
    
    if not pages:
        print("‚ùå Nenhuma p√°gina encontrada")
        return
    
    sucessos = 0
    erros = 0
    ja_tinham_exercicios = 0
    
    for i, page in enumerate(pages, 1):
        page_id = page["id"]
        titulo = obter_titulo_pagina(page)
        
        print(f"\n--- P√°gina {i}/{len(pages)} ---")
        print(f"T√≠tulo: {titulo}")
        
        # Verificar se j√° tem exerc√≠cios
        if verificar_se_ja_tem_exercicios(page_id):
            print(f"‚è≠Ô∏è P√°gina j√° possui se√ß√£o de exerc√≠cios")
            ja_tinham_exercicios += 1
            continue
        
        # Gerar exerc√≠cios espec√≠ficos
        exercicios = gerar_exercicios_especificos(titulo)
        
        # Adicionar se√ß√£o de exerc√≠cios
        if adicionar_secao_exercicios(page_id, titulo, exercicios):
            sucessos += 1
        else:
            erros += 1
        
        time.sleep(1)  # Pausa para n√£o sobrecarregar a API
    
    print_secao("RELAT√ìRIO FINAL")
    print(f"üìä Total de p√°ginas processadas: {len(pages)}")
    print(f"‚úÖ Sucessos: {sucessos}")
    print(f"‚ùå Erros: {erros}")
    print(f"‚è≠Ô∏è J√° tinham exerc√≠cios: {ja_tinham_exercicios}")
    print(f"üìà Taxa de sucesso: {(sucessos/(len(pages)-ja_tinham_exercicios)*100):.1f}%")
    
    if sucessos > 0:
        print("üéâ EXERC√çCIOS ADICIONADOS COM SUCESSO!")
    else:
        print("‚ö†Ô∏è Nenhum exerc√≠cio foi adicionado")

if __name__ == "__main__":
    processar_adicao_exercicios(DATABASE_ALUNO)
