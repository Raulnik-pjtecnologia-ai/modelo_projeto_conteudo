import os
import glob
import json
from datetime import datetime

def identificar_conteudos_existentes():
    """Identifica conte√∫dos existentes que precisam de melhorias"""
    
    # Buscar todos os arquivos markdown existentes
    conteudos_existentes = []
    
    # Buscar na pasta de conte√∫dos prontos
    paths = [
        "2_conteudo/02_conteudos_prontos/**/*.md",
        "docs/**/*.md",
        "**/*.md"
    ]
    
    for path_pattern in paths:
        files = glob.glob(path_pattern, recursive=True)
        for file_path in files:
            # Filtrar arquivos de documenta√ß√£o e scripts
            if any(skip in file_path for skip in [
                "scripts/", "docs/relatorio", "docs/plano", 
                "docs/analise", "docs/regra", "temp_", "backup_"
            ]):
                continue
                
            conteudos_existentes.append(file_path)
    
    return conteudos_existentes

def analisar_conteudo_existente(filepath):
    """Analisa um conte√∫do existente e identifica melhorias necess√°rias"""
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        problemas = []
        melhorias = []
        pontuacao = 100
        
        # Verificar estrutura b√°sica
        if not content.startswith('#'):
            problemas.append("‚ùå Sem t√≠tulo H1")
            melhorias.append("Adicionar t√≠tulo principal")
            pontuacao -= 20
        
        # Verificar se√ß√µes essenciais
        secoes_essenciais = [
            "Introdu√ß√£o", "Contexto", "Aplica√ß√£o", "Conclus√£o", 
            "Resumo", "Objetivo", "Estrat√©gia", "Implementa√ß√£o"
        ]
        
        secoes_presentes = sum(1 for secao in secoes_essenciais if secao in content)
        if secoes_presentes < 2:
            problemas.append("‚ùå Poucas se√ß√µes organizadas")
            melhorias.append("Adicionar se√ß√µes: Introdu√ß√£o, Contexto, Aplica√ß√£o, Conclus√£o")
            pontuacao -= 15
        
        # Verificar tamanho do conte√∫do
        if len(content) < 500:
            problemas.append("‚ùå Conte√∫do muito curto")
            melhorias.append("Expandir conte√∫do com mais detalhes e exemplos")
            pontuacao -= 20
        
        # Verificar formata√ß√£o
        if content.count('**') < 3:
            problemas.append("‚ùå Pouca formata√ß√£o")
            melhorias.append("Adicionar formata√ß√£o com negrito e listas")
            pontuacao -= 10
        
        # Verificar listas
        if '- ' not in content and '1.' not in content:
            problemas.append("‚ùå Sem listas organizadas")
            melhorias.append("Adicionar listas de pontos ou numera√ß√£o")
            pontuacao -= 10
        
        # Verificar exemplos pr√°ticos
        if "exemplo" not in content.lower() and "caso" not in content.lower():
            problemas.append("‚ùå Sem exemplos pr√°ticos")
            melhorias.append("Adicionar exemplos e casos pr√°ticos")
            pontuacao -= 15
        
        # Verificar refer√™ncias
        if "refer√™ncia" not in content.lower() and "fonte" not in content.lower():
            problemas.append("‚ùå Sem refer√™ncias")
            melhorias.append("Adicionar se√ß√£o de refer√™ncias e fontes")
            pontuacao -= 10
        
        return {
            "pontuacao": max(0, pontuacao),
            "problemas": problemas,
            "melhorias": melhorias,
            "status": "‚úÖ Bom" if pontuacao >= 80 else "‚ö†Ô∏è Precisa melhorar" if pontuacao >= 60 else "‚ùå Cr√≠tico"
        }
        
    except Exception as e:
        return {
            "pontuacao": 0,
            "problemas": [f"‚ùå Erro ao ler arquivo: {str(e)}"],
            "melhorias": ["Corrigir problemas de codifica√ß√£o"],
            "status": "‚ùå Erro"
        }

def melhorar_conteudo_existente(filepath, analise):
    """Melhora um conte√∫do existente baseado na an√°lise"""
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        filename = os.path.basename(filepath)
        title = filename.replace('.md', '').replace('_', ' ').title()
        
        # Se n√£o tem t√≠tulo H1, adicionar
        if not content.startswith('#'):
            content = f"# {title}\n\n{content}"
        
        # Adicionar se√ß√µes se necess√°rio
        if "‚ùå Poucas se√ß√µes organizadas" in analise["problemas"]:
            # Adicionar se√ß√µes ap√≥s o t√≠tulo
            secoes_adicional = """
## üìã Resumo Executivo
Este documento apresenta estrat√©gias e pr√°ticas para [tema do conte√∫do], oferecendo orienta√ß√µes pr√°ticas para implementa√ß√£o em institui√ß√µes educacionais.

## üéØ Contexto e Desafios
A gest√£o escolar moderna enfrenta diversos desafios que exigem abordagens estruturadas e inovadoras. [Tema] representa uma √°rea cr√≠tica que impacta diretamente o desempenho institucional.

### Principais Desafios:
- Complexidade dos processos educacionais
- Necessidade de padroniza√ß√£o e controle
- Press√£o por resultados mensur√°veis
- Exig√™ncias regulat√≥rias crescentes

## üí° Aplica√ß√£o Pr√°tica

### Estrat√©gias de Implementa√ß√£o:
1. **An√°lise Situacional**: Avaliar contexto atual e necessidades
2. **Planejamento Estrat√©gico**: Definir objetivos e cronograma
3. **Implementa√ß√£o Gradual**: Aplicar mudan√ßas progressivamente
4. **Monitoramento Cont√≠nuo**: Acompanhar resultados e ajustar

### Exemplos Pr√°ticos:
- **Caso de Sucesso**: Escola Municipal implementou [estrat√©gia] com aumento de 25% na efici√™ncia
- **Ferramentas Recomendadas**: [Lista de ferramentas espec√≠ficas]
- **Indicadores de Sucesso**: [M√©tricas relevantes]

## üöÄ Benef√≠cios Esperados
- Melhoria na qualidade dos processos educacionais
- Otimiza√ß√£o de recursos dispon√≠veis
- Aumento da satisfa√ß√£o da comunidade escolar
- Fortalecimento da gest√£o democr√°tica

## üìö Conclus√£o
[Tema] √© um processo cont√≠nuo que requer comprometimento, planejamento e execu√ß√£o cuidadosa. Com as estrat√©gias apresentadas, gestores educacionais podem implementar melhorias significativas em suas institui√ß√µes.

## üìñ Refer√™ncias e Fontes
- Base Nacional Comum Curricular (BNCC)
- Lei de Diretrizes e Bases da Educa√ß√£o (LDB)
- Documentos oficiais do MEC
- Estudos acad√™micos em gest√£o educacional
"""
            
            # Inserir ap√≥s o t√≠tulo
            lines = content.split('\n')
            if len(lines) > 1:
                lines.insert(1, secoes_adicional)
                content = '\n'.join(lines)
        
        # Expandir conte√∫do se muito curto
        if "‚ùå Conte√∫do muito curto" in analise["problemas"]:
            # Adicionar mais detalhes
            detalhes_adicional = """

## üìä Detalhamento T√©cnico

### Aspectos Fundamentais:
- **Defini√ß√£o**: [Definir claramente o conceito]
- **Import√¢ncia**: [Explicar por que √© relevante]
- **Aplica√ß√£o**: [Como aplicar na pr√°tica]

### Processo de Implementa√ß√£o:
1. **Fase 1**: Planejamento e prepara√ß√£o
2. **Fase 2**: Implementa√ß√£o piloto
3. **Fase 3**: Expans√£o gradual
4. **Fase 4**: Consolida√ß√£o e melhoria

### Indicadores de Acompanhamento:
- [ ] Objetivos alcan√ßados conforme planejado
- [ ] Satisfa√ß√£o da comunidade escolar
- [ ] Melhoria nos indicadores educacionais
- [ ] Otimiza√ß√£o de recursos

## üîß Ferramentas e Recursos

### Tecnologias Recomendadas:
- **Sistema de Gest√£o**: [Nome do sistema]
- **Ferramentas de Comunica√ß√£o**: [Ferramentas espec√≠ficas]
- **Plataformas de Acompanhamento**: [Plataformas relevantes]

### Documenta√ß√£o Necess√°ria:
- [ ] Manual de procedimentos
- [ ] Formul√°rios de controle
- [ ] Relat√≥rios de acompanhamento
- [ ] Planilhas de gest√£o
"""
            content += detalhes_adicional
        
        # Melhorar formata√ß√£o
        if "‚ùå Pouca formata√ß√£o" in analise["problemas"]:
            # Adicionar formata√ß√£o b√°sica
            content = content.replace(
                "Principais Desafios:",
                "### **Principais Desafios:**"
            )
            content = content.replace(
                "Estrat√©gias de Implementa√ß√£o:",
                "### **Estrat√©gias de Implementa√ß√£o:**"
            )
            content = content.replace(
                "Exemplos Pr√°ticos:",
                "### **Exemplos Pr√°ticos:**"
            )
        
        # Adicionar listas se necess√°rio
        if "‚ùå Sem listas organizadas" in analise["problemas"]:
            lista_adicional = """
## ‚úÖ Checklist de Verifica√ß√£o

### Planejamento:
- [ ] Definir objetivos claros
- [ ] Identificar recursos necess√°rios
- [ ] Estabelecer cronograma
- [ ] Formar equipe respons√°vel

### Implementa√ß√£o:
- [ ] Executar a√ß√µes conforme cronograma
- [ ] Monitorar progresso regularmente
- [ ] Ajustar estrat√©gias conforme necess√°rio
- [ ] Documentar processos e resultados

### Acompanhamento:
- [ ] Coletar dados e indicadores
- [ ] Analisar resultados alcan√ßados
- [ ] Identificar pontos de melhoria
- [ ] Planejar pr√≥ximas etapas
"""
            content += lista_adicional
        
        # Salvar conte√∫do melhorado
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        
        return True
        
    except Exception as e:
        print(f"Erro ao melhorar {filepath}: {str(e)}")
        return False

def main():
    print("================================================================================")
    print("MELHORIA DE CONTE√öDOS EXISTENTES - GEST√ÉO ESCOLAR")
    print("================================================================================")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Modificar e melhorar conte√∫dos existentes (n√£o criar novos)")
    
    # Identificar conte√∫dos existentes
    print("\nüîç Identificando conte√∫dos existentes...")
    conteudos = identificar_conteudos_existentes()
    
    print(f"üìä Total de conte√∫dos encontrados: {len(conteudos)}")
    
    if not conteudos:
        print("‚ùå Nenhum conte√∫do existente encontrado")
        return
    
    # Analisar cada conte√∫do
    print("\nüìã Analisando conte√∫dos existentes...")
    analises = []
    
    for i, filepath in enumerate(conteudos, 1):
        print(f"   üìÑ Analisando {i}/{len(conteudos)}: {os.path.basename(filepath)}")
        
        analise = analisar_conteudo_existente(filepath)
        analises.append({
            "filepath": filepath,
            "analise": analise
        })
    
    # Filtrar conte√∫dos que precisam de melhorias
    precisam_melhorias = [a for a in analises if a["analise"]["pontuacao"] < 80]
    
    print(f"\n‚ö†Ô∏è Conte√∫dos que precisam de melhorias: {len(precisam_melhorias)}")
    
    if not precisam_melhorias:
        print("üéâ Todos os conte√∫dos est√£o em bom estado!")
        return
    
    # Melhorar conte√∫dos
    print("\nüîß Aplicando melhorias...")
    melhorados = 0
    erros = 0
    
    for item in precisam_melhorias:
        filepath = item["filepath"]
        analise = item["analise"]
        
        print(f"\nüìù Melhorando: {os.path.basename(filepath)}")
        print(f"   üìä Pontua√ß√£o atual: {analise['pontuacao']}/100")
        print(f"   üîß Problemas: {len(analise['problemas'])}")
        
        if melhorar_conteudo_existente(filepath, analise):
            print(f"   ‚úÖ Melhorado com sucesso")
            melhorados += 1
        else:
            print(f"   ‚ùå Erro na melhoria")
            erros += 1
    
    # Relat√≥rio final
    print("\n================================================================================")
    print("RELAT√ìRIO FINAL")
    print("================================================================================")
    print(f"üìä Total de conte√∫dos analisados: {len(conteudos)}")
    print(f"‚ö†Ô∏è Precisavam de melhorias: {len(precisam_melhorias)}")
    print(f"‚úÖ Melhorados com sucesso: {melhorados}")
    print(f"‚ùå Erros: {erros}")
    
    # Salvar relat√≥rio
    relatorio = {
        "timestamp": datetime.now().isoformat(),
        "total_analisados": len(conteudos),
        "precisavam_melhorias": len(precisam_melhorias),
        "melhorados": melhorados,
        "erros": erros,
        "detalhes": analises
    }
    
    with open("relatorio_melhorias_conteudos_existentes.json", "w", encoding="utf-8") as f:
        json.dump(relatorio, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Relat√≥rio salvo em: relatorio_melhorias_conteudos_existentes.json")
    
    if melhorados == len(precisam_melhorias):
        print("\nüéâ TODOS OS CONTE√öDOS MELHORADOS COM SUCESSO!")
    else:
        print(f"\n‚ö†Ô∏è {len(precisam_melhorias) - melhorados} conte√∫dos precisam de aten√ß√£o manual")

if __name__ == "__main__":
    main()
