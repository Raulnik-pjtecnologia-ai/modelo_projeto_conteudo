#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Verifica√ß√£o Completa das Bibliotecas
Verifica e corrige propriedades, taxonomias e conformidade com boilerplate
"""

import os
import sys
import requests
import json
from datetime import datetime

sys.stdout.reconfigure(encoding='utf-8')

NOTION_TOKEN = os.environ.get("NOTION_TOKEN", "")
if not NOTION_TOKEN:
    print("ERRO: Configure NOTION_TOKEN")
    sys.exit(1)

# IDs das bibliotecas
DATABASE_GESTAO = "2325113a91a381c09b33f826449a218f"
DATABASE_ALUNO = "2695113a91a381ddbfc4fc8e4df72e7f"

headers = {
    "Authorization": f"Bearer {NOTION_TOKEN}",
    "Content-Type": "application/json",
    "Notion-Version": "2022-06-28"
}

def print_secao(titulo):
    print("\n" + "="*60)
    print(titulo.upper())
    print("="*60)

def buscar_paginas_database(database_id, nome_biblioteca):
    """Busca todas as p√°ginas de um database"""
    print(f"\nüîç Buscando p√°ginas da biblioteca: {nome_biblioteca}")
    
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    all_pages = []
    has_more = True
    start_cursor = None
    
    while has_more:
        payload = {}
        if start_cursor:
            payload["start_cursor"] = start_cursor
        
        response = requests.post(url, headers=headers, json=payload)
        
        if response.status_code == 200:
            data = response.json()
            all_pages.extend(data.get("results", []))
            has_more = data.get("has_more", False)
            start_cursor = data.get("next_cursor")
        else:
            print(f"‚ùå Erro ao buscar p√°ginas: {response.status_code}")
            break
    
    print(f"‚úÖ Total encontrado: {len(all_pages)} p√°ginas")
    return all_pages

def analisar_propriedades_pagina(page, nome_biblioteca):
    """Analisa propriedades de uma p√°gina"""
    props = page.get("properties", {})
    page_id = page["id"]
    
    # T√≠tulo
    title_prop = props.get("Name", {}) or props.get("Title", {})
    titulo = ""
    if title_prop.get("title"):
        titulo = "".join([t.get("plain_text", "") for t in title_prop["title"]])
    
    problemas = []
    
    # Verificar propriedades obrigat√≥rias
    propriedades_obrigatorias = {
        "Status editorial": ["Rascunho", "Em revis√£o", "Aprovado", "Publicado"],
        "Tipo": ["Artigo", "Checklist", "Li√ß√£o", "V√≠deo", "Documento Oficial"],
        "N√≠vel de profundidade": ["B√°sico", "Intermedi√°rio", "Avan√ßado", "Estrat√©gico", "T√°tico", "Operacional"]
    }
    
    for prop_name, valores_validos in propriedades_obrigatorias.items():
        if prop_name in props:
            prop_value = props[prop_name]
            if prop_value.get("select"):
                valor = prop_value["select"]["name"]
                if valor not in valores_validos:
                    problemas.append(f"‚ùå {prop_name}: '{valor}' n√£o √© v√°lido")
            elif prop_value.get("status"):
                valor = prop_value["status"]["name"]
                if valor not in valores_validos:
                    problemas.append(f"‚ùå {prop_name}: '{valor}' n√£o √© v√°lido")
            elif prop_value.get("multi_select"):
                valores = [item["name"] for item in prop_value["multi_select"]]
                for valor in valores:
                    if valor not in valores_validos:
                        problemas.append(f"‚ùå {prop_name}: '{valor}' n√£o √© v√°lido")
        else:
            problemas.append(f"‚ö†Ô∏è Propriedade '{prop_name}' ausente")
    
    # Verificar Tags (deve ter pelo menos uma)
    if "Tags" in props:
        tags = props["Tags"].get("multi_select", [])
        if not tags:
            problemas.append("‚ö†Ô∏è Tags vazias - deve ter pelo menos uma tag")
    
    # Verificar Fun√ß√£o (para Gest√£o)
    if nome_biblioteca == "Gest√£o" and "Fun√ß√£o " in props:
        funcoes = props["Fun√ß√£o "].get("multi_select", [])
        if not funcoes:
            problemas.append("‚ö†Ô∏è Fun√ß√£o vazia - deve ter pelo menos uma fun√ß√£o")
    
    return {
        "page_id": page_id,
        "titulo": titulo,
        "problemas": problemas,
        "props": props
    }

def corrigir_propriedades_pagina(page_id, problemas, nome_biblioteca):
    """Corrige propriedades de uma p√°gina"""
    correcoes_aplicadas = []
    
    # Propriedades padr√£o para corre√ß√£o
    propriedades_padrao = {
        "Status editorial": {"status": {"name": "Publicado"}},
        "Tipo": {"select": {"name": "Artigo"}},
        "N√≠vel de profundidade": {"multi_select": [{"name": "Intermedi√°rio"}]},
        "Tags": {"multi_select": [{"name": "Gest√£o Escolar"}] if nome_biblioteca == "Gest√£o" else [{"name": "ENEM2025"}]}
    }
    
    if nome_biblioteca == "Gest√£o":
        propriedades_padrao["Fun√ß√£o "] = {"multi_select": [{"name": "Gest√£o"}]}
    
    # Aplicar corre√ß√µes
    for prop_name, prop_value in propriedades_padrao.items():
        try:
            url = f"https://api.notion.com/v1/pages/{page_id}"
            payload = {"properties": {prop_name: prop_value}}
            
            response = requests.patch(url, headers=headers, json=payload)
            
            if response.status_code == 200:
                correcoes_aplicadas.append(prop_name)
            else:
                print(f"   ‚ùå Erro ao corrigir {prop_name}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå Erro ao corrigir {prop_name}: {str(e)}")
    
    return correcoes_aplicadas

def verificar_conteudo_pagina(page_id):
    """Verifica se a p√°gina tem conte√∫do adequado"""
    url = f"https://api.notion.com/v1/blocks/{page_id}/children"
    
    try:
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            blocks = response.json().get("results", [])
            
            # Contar tipos de blocos
            tipos_blocos = {}
            for block in blocks:
                block_type = block.get("type")
                tipos_blocos[block_type] = tipos_blocos.get(block_type, 0) + 1
            
            # Verificar se tem conte√∫do substancial
            blocos_conteudo = tipos_blocos.get("paragraph", 0) + tipos_blocos.get("heading_1", 0) + \
                            tipos_blocos.get("heading_2", 0) + tipos_blocos.get("heading_3", 0)
            
            return {
                "total_blocos": len(blocks),
                "blocos_conteudo": blocos_conteudo,
                "tem_conteudo": blocos_conteudo >= 3,
                "tipos_blocos": tipos_blocos
            }
        return None
    except:
        return None

def main():
    print("="*60)
    print("VERIFICACAO COMPLETA DAS BIBLIOTECAS")
    print("="*60)
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Verificar ambas as bibliotecas
    bibliotecas = [
        {"id": DATABASE_GESTAO, "nome": "Gest√£o Escolar"},
        {"id": DATABASE_ALUNO, "nome": "Editorial Alunos PR√â-ENEM"}
    ]
    
    relatorio_final = {
        "gestao_escolar": {"total": 0, "problemas": 0, "corrigidos": 0},
        "editorial_alunos_pre_enem": {"total": 0, "problemas": 0, "corrigidos": 0}
    }
    
    for biblioteca in bibliotecas:
        print_secao(f"Biblioteca: {biblioteca['nome']}")
        
        # Buscar p√°ginas
        paginas = buscar_paginas_database(biblioteca["id"], biblioteca["nome"])
        chave = biblioteca["nome"].lower().replace(" ", "_").replace("√£", "a").replace("√ß", "c").replace("√©", "e").replace("√™", "e").replace("-", "_")
        relatorio_final[chave]["total"] = len(paginas)
        
        # Analisar cada p√°gina
        paginas_com_problemas = []
        total_correcoes = 0
        
        for page in paginas:
            analise = analisar_propriedades_pagina(page, biblioteca["nome"])
            
            if analise["problemas"]:
                paginas_com_problemas.append(analise)
                print(f"\nüìÑ {analise['titulo'][:50]}...")
                for problema in analise["problemas"]:
                    print(f"   {problema}")
                
                # Aplicar corre√ß√µes
                print("   üîß Aplicando corre√ß√µes...")
                correcoes = corrigir_propriedades_pagina(
                    analise["page_id"], 
                    analise["problemas"], 
                    biblioteca["nome"]
                )
                
                if correcoes:
                    print(f"   ‚úÖ Corre√ß√µes aplicadas: {', '.join(correcoes)}")
                    total_correcoes += len(correcoes)
                else:
                    print("   ‚ùå Nenhuma corre√ß√£o aplicada")
        
        relatorio_final[chave]["problemas"] = len(paginas_com_problemas)
        relatorio_final[chave]["corrigidos"] = total_correcoes
        
        print(f"\nüìä Resumo {biblioteca['nome']}:")
        print(f"   Total de p√°ginas: {len(paginas)}")
        print(f"   P√°ginas com problemas: {len(paginas_com_problemas)}")
        print(f"   Corre√ß√µes aplicadas: {total_correcoes}")
    
    # Relat√≥rio final
    print_secao("Relat√≥rio Final")
    
    print("\nüìà ESTAT√çSTICAS GERAIS:")
    print(f"   Gest√£o Escolar: {relatorio_final['gestao_escolar']['total']} p√°ginas")
    print(f"   Editorial Aluno: {relatorio_final['editorial_alunos_pre_enem']['total']} p√°ginas")
    print(f"   Total: {relatorio_final['gestao_escolar']['total'] + relatorio_final['editorial_alunos_pre_enem']['total']} p√°ginas")
    
    print("\nüîß CORRE√á√ïES APLICADAS:")
    print(f"   Gest√£o Escolar: {relatorio_final['gestao_escolar']['corrigidos']} corre√ß√µes")
    print(f"   Editorial Aluno: {relatorio_final['editorial_alunos_pre_enem']['corrigidos']} corre√ß√µes")
    print(f"   Total: {relatorio_final['gestao_escolar']['corrigidos'] + relatorio_final['editorial_alunos_pre_enem']['corrigidos']} corre√ß√µes")
    
    print("\n‚úÖ VERIFICA√á√ÉO CONCLU√çDA!")
    print("   Ambas as bibliotecas foram verificadas e corrigidas")
    print("   Propriedades e taxonomias est√£o alinhadas com o boilerplate")
    
    print("\n" + "="*60)

if __name__ == "__main__":
    main()

