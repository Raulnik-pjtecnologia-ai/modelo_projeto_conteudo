#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para Limpeza de Arquivos Tempor√°rios
Remove arquivos tempor√°rios criados durante os processos
"""

import os
import sys
import glob
from datetime import datetime

sys.stdout.reconfigure(encoding='utf-8')

def print_secao(titulo):
    print("\n" + "="*80)
    print(titulo)
    print("="*80)

def identificar_arquivos_temporarios():
    """Identifica arquivos tempor√°rios para remo√ß√£o"""
    print("üîç Identificando arquivos tempor√°rios...")
    
    # Padr√µes de arquivos tempor√°rios
    padroes = [
        "**/*_temp.py",
        "**/*_temp.md", 
        "**/*_temp.json",
        "**/temp_*",
        "**/backup_*",
        "**/*_backup.*",
        "**/relatorio_*.json",
        "**/docs/relatorio_*.json"
    ]
    
    arquivos_para_remover = []
    
    for padrao in padroes:
        arquivos = glob.glob(padrao, recursive=True)
        arquivos_para_remover.extend(arquivos)
    
    # Remover duplicatas
    arquivos_para_remover = list(set(arquivos_para_remover))
    
    print(f"üìã Encontrados {len(arquivos_para_remover)} arquivos tempor√°rios")
    
    return arquivos_para_remover

def remover_arquivos_temporarios(arquivos):
    """Remove os arquivos tempor√°rios identificados"""
    print("üßπ Iniciando limpeza de arquivos tempor√°rios...")
    
    removidos = 0
    erros = 0
    
    for arquivo in arquivos:
        try:
            if os.path.exists(arquivo):
                os.remove(arquivo)
                print(f"   ‚úÖ Removido: {arquivo}")
                removidos += 1
            else:
                print(f"   ‚ö†Ô∏è N√£o encontrado: {arquivo}")
        except Exception as e:
            print(f"   ‚ùå Erro ao remover {arquivo}: {e}")
            erros += 1
    
    return removidos, erros

def verificar_estrutura_projeto():
    """Verifica se a estrutura do projeto est√° limpa"""
    print("üîç Verificando estrutura do projeto...")
    
    diretorios_importantes = [
        "2_conteudo/02_conteudos_prontos",
        "docs",
        "scripts"
    ]
    
    for diretorio in diretorios_importantes:
        if os.path.exists(diretorio):
            arquivos = os.listdir(diretorio)
            print(f"   üìÅ {diretorio}: {len(arquivos)} arquivos")
        else:
            print(f"   ‚ùå Diret√≥rio n√£o encontrado: {diretorio}")

def gerar_relatorio_limpeza(removidos, erros, total_identificados):
    """Gera relat√≥rio da limpeza realizada"""
    print_secao("RELAT√ìRIO DE LIMPEZA")
    print(f"üìä Total de arquivos identificados: {total_identificados}")
    print(f"‚úÖ Arquivos removidos com sucesso: {removidos}")
    print(f"‚ùå Erros durante remo√ß√£o: {erros}")
    print(f"üìà Taxa de sucesso: {(removidos/(removidos+erros)*100) if (removidos+erros) > 0 else 0:.1f}%")
    
    if erros == 0:
        print("üéâ LIMPEZA CONCLU√çDA COM SUCESSO!")
    else:
        print("‚ö†Ô∏è Alguns arquivos n√£o puderam ser removidos")

def main():
    print_secao("LIMPEZA DE ARQUIVOS TEMPOR√ÅRIOS")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Remover arquivos tempor√°rios criados durante os processos")
    
    # Identificar arquivos tempor√°rios
    arquivos_temporarios = identificar_arquivos_temporarios()
    
    if not arquivos_temporarios:
        print("‚úÖ Nenhum arquivo tempor√°rio encontrado")
        return
    
    # Mostrar arquivos que ser√£o removidos
    print("\nüìã Arquivos que ser√£o removidos:")
    for arquivo in arquivos_temporarios:
        print(f"   - {arquivo}")
    
    # Confirmar remo√ß√£o
    print(f"\n‚ö†Ô∏è ATEN√á√ÉO: {len(arquivos_temporarios)} arquivos ser√£o removidos permanentemente!")
    confirmacao = input("Deseja continuar? (s/N): ").lower().strip()
    
    if confirmacao not in ['s', 'sim', 'y', 'yes']:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        return
    
    # Remover arquivos
    removidos, erros = remover_arquivos_temporarios(arquivos_temporarios)
    
    # Verificar estrutura
    print_secao("VERIFICA√á√ÉO P√ìS-LIMPEZA")
    verificar_estrutura_projeto()
    
    # Gerar relat√≥rio
    gerar_relatorio_limpeza(removidos, erros, len(arquivos_temporarios))
    
    print_secao("LIMPEZA CONCLU√çDA!")

if __name__ == "__main__":
    main()
