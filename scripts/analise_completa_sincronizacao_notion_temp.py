import os
import json
from datetime import datetime
from notion_client import Client
from dotenv import load_dotenv

def analise_completa_sincronizacao_notion():
    """An√°lise completa de todo material processado e verifica√ß√£o de sincroniza√ß√£o com Notion."""
    print("üîç AN√ÅLISE COMPLETA DE SINCRONIZA√á√ÉO COM NOTION")
    print("=" * 70)
    
    # Carregar configura√ß√£o
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    
    if not notion_token:
        print("‚ùå Configura√ß√£o do Notion n√£o encontrada")
        return False
    
    # Inicializar cliente Notion
    notion = Client(auth=notion_token)
    
    try:
        # Carregar todos os dados de corre√ß√£o
        dados_correcoes = {}
        
        # Carregar dados da primeira rodada
        try:
            with open("correcao_completa_boilerplate_100.json", "r", encoding="utf-8") as f:
                dados_correcoes["primeira_rodada"] = json.load(f)
            print("‚úÖ Dados da primeira rodada carregados")
        except FileNotFoundError:
            print("‚ö†Ô∏è Arquivo da primeira rodada n√£o encontrado")
            dados_correcoes["primeira_rodada"] = None
        
        # Carregar dados da segunda rodada
        try:
            with open("segunda_rodada_correcao_100.json", "r", encoding="utf-8") as f:
                dados_correcoes["segunda_rodada"] = json.load(f)
            print("‚úÖ Dados da segunda rodada carregados")
        except FileNotFoundError:
            print("‚ö†Ô∏è Arquivo da segunda rodada n√£o encontrado")
            dados_correcoes["segunda_rodada"] = None
        
        # Carregar dados da corre√ß√£o final
        try:
            with open("correcao_final_paginas_reprovadas.json", "r", encoding="utf-8") as f:
                dados_correcoes["correcao_final"] = json.load(f)
            print("‚úÖ Dados da corre√ß√£o final carregados")
        except FileNotFoundError:
            print("‚ö†Ô∏è Arquivo da corre√ß√£o final n√£o encontrado")
            dados_correcoes["correcao_final"] = None
        
        # Carregar dados da verifica√ß√£o completa
        try:
            with open("verificacao_completa_boilerplate_notion.json", "r", encoding="utf-8") as f:
                dados_correcoes["verificacao_completa"] = json.load(f)
            print("‚úÖ Dados da verifica√ß√£o completa carregados")
        except FileNotFoundError:
            print("‚ö†Ô∏è Arquivo da verifica√ß√£o completa n√£o encontrado")
            dados_correcoes["verificacao_completa"] = None
        
        print(f"\nüìä RESUMO DOS DADOS CARREGADOS:")
        print(f"   üîÑ Primeira rodada: {'‚úÖ' if dados_correcoes['primeira_rodada'] else '‚ùå'}")
        print(f"   üîÑ Segunda rodada: {'‚úÖ' if dados_correcoes['segunda_rodada'] else '‚ùå'}")
        print(f"   üîÑ Corre√ß√£o final: {'‚úÖ' if dados_correcoes['correcao_final'] else '‚ùå'}")
        print(f"   üîç Verifica√ß√£o completa: {'‚úÖ' if dados_correcoes['verificacao_completa'] else '‚ùå'}")
        
        # Consolidar todas as p√°ginas processadas
        todas_paginas_processadas = set()
        paginas_por_rodada = {}
        
        if dados_correcoes["primeira_rodada"]:
            paginas_primeira = [p["page_id"] for p in dados_correcoes["primeira_rodada"]["paginas_corrigidas"]]
            todas_paginas_processadas.update(paginas_primeira)
            paginas_por_rodada["primeira_rodada"] = paginas_primeira
            print(f"   üìÑ Primeira rodada: {len(paginas_primeira)} p√°ginas")
        
        if dados_correcoes["segunda_rodada"]:
            paginas_segunda = [p["page_id"] for p in dados_correcoes["segunda_rodada"]["paginas_corrigidas_segunda_rodada"]]
            todas_paginas_processadas.update(paginas_segunda)
            paginas_por_rodada["segunda_rodada"] = paginas_segunda
            print(f"   üìÑ Segunda rodada: {len(paginas_segunda)} p√°ginas")
        
        if dados_correcoes["correcao_final"]:
            paginas_final = [p["page_id"] for p in dados_correcoes["correcao_final"]["paginas_corrigidas_final"]]
            todas_paginas_processadas.update(paginas_final)
            paginas_por_rodada["correcao_final"] = paginas_final
            print(f"   üìÑ Corre√ß√£o final: {len(paginas_final)} p√°ginas")
        
        print(f"\nüìä TOTAL DE P√ÅGINAS PROCESSADAS: {len(todas_paginas_processadas)}")
        
        # Verificar sincroniza√ß√£o com Notion
        print(f"\nüîç VERIFICANDO SINCRONIZA√á√ÉO COM NOTION...")
        
        paginas_sincronizadas = []
        paginas_nao_sincronizadas = []
        paginas_com_erro = []
        
        for i, page_id in enumerate(todas_paginas_processadas):
            print(f"   üîç Verificando p√°gina {i+1}/{len(todas_paginas_processadas)}: {page_id[:8]}...")
            
            try:
                # Buscar p√°gina no Notion
                page = notion.pages.retrieve(page_id)
                
                # Buscar blocos da p√°gina
                blocks_response = notion.blocks.children.list(page_id)
                blocks = blocks_response.get("results", [])
                
                # Verificar se tem conte√∫do do boilerplate
                conteudo_texto = ""
                for block in blocks:
                    if block.get("type") in ["paragraph", "heading_1", "heading_2", "heading_3", "bulleted_list_item", "numbered_list_item"]:
                        rich_text = block.get(block["type"], {}).get("rich_text", [])
                        if rich_text:
                            texto_bloco = "".join([rt["text"]["content"] for rt in rich_text])
                            conteudo_texto += texto_bloco + "\n"
                
                # Verificar elementos do boilerplate
                elementos_boilerplate = {
                    "censo_escolar": any(palavra in conteudo_texto.lower() for palavra in ["censo escolar", "2024", "inep"]),
                    "videos": "youtube" in conteudo_texto.lower(),
                    "fontes": any(palavra in conteudo_texto.lower() for palavra in ["fonte:", "refer√™ncia", "mec", "inep"]),
                    "resumo_executivo": any(palavra in conteudo_texto.lower() for palavra in ["resumo", "executivo", "sum√°rio"]),
                    "tags": "tags:" in conteudo_texto.lower() or "**tags**" in conteudo_texto.lower(),
                    "conclusao": any(palavra in conteudo_texto.lower() for palavra in ["conclus√£o", "conclusao", "finalizando"])
                }
                
                total_elementos = sum(elementos_boilerplate.values())
                percentual_conformidade = (total_elementos / 6) * 100
                
                if percentual_conformidade >= 80:
                    status_sincronizacao = "SINCRONIZADO"
                    paginas_sincronizadas.append({
                        "page_id": page_id,
                        "titulo": page.get("properties", {}).get("title", {}).get("title", [{}])[0].get("text", {}).get("content", "Sem t√≠tulo"),
                        "percentual_conformidade": percentual_conformidade,
                        "elementos_presentes": [k for k, v in elementos_boilerplate.items() if v],
                        "elementos_faltando": [k for k, v in elementos_boilerplate.items() if not v]
                    })
                    print(f"      ‚úÖ {status_sincronizacao} ({percentual_conformidade:.1f}%)")
                else:
                    status_sincronizacao = "N√ÉO SINCRONIZADO"
                    paginas_nao_sincronizadas.append({
                        "page_id": page_id,
                        "titulo": page.get("properties", {}).get("title", {}).get("title", [{}])[0].get("text", {}).get("content", "Sem t√≠tulo"),
                        "percentual_conformidade": percentual_conformidade,
                        "elementos_presentes": [k for k, v in elementos_boilerplate.items() if v],
                        "elementos_faltando": [k for k, v in elementos_boilerplate.items() if not v]
                    })
                    print(f"      ‚ùå {status_sincronizacao} ({percentual_conformidade:.1f}%)")
                
            except Exception as e:
                print(f"      ‚ö†Ô∏è ERRO: {e}")
                paginas_com_erro.append({
                    "page_id": page_id,
                    "erro": str(e)
                })
        
        # Calcular estat√≠sticas
        total_verificadas = len(todas_paginas_processadas)
        total_sincronizadas = len(paginas_sincronizadas)
        total_nao_sincronizadas = len(paginas_nao_sincronizadas)
        total_com_erro = len(paginas_com_erro)
        percentual_sincronizacao = (total_sincronizadas / total_verificadas * 100) if total_verificadas > 0 else 0
        
        print(f"\nüìä RESULTADOS DA VERIFICA√á√ÉO DE SINCRONIZA√á√ÉO:")
        print(f"   üìÑ Total de p√°ginas verificadas: {total_verificadas}")
        print(f"   ‚úÖ P√°ginas sincronizadas: {total_sincronizadas}")
        print(f"   ‚ùå P√°ginas n√£o sincronizadas: {total_nao_sincronizadas}")
        print(f"   ‚ö†Ô∏è P√°ginas com erro: {total_com_erro}")
        print(f"   üìä Percentual de sincroniza√ß√£o: {percentual_sincronizacao:.1f}%")
        
        # Salvar dados da an√°lise
        dados_analise = {
            "data_analise": datetime.now().isoformat(),
            "titulo": "AN√ÅLISE COMPLETA DE SINCRONIZA√á√ÉO COM NOTION",
            "total_paginas_processadas": total_verificadas,
            "total_sincronizadas": total_sincronizadas,
            "total_nao_sincronizadas": total_nao_sincronizadas,
            "total_com_erro": total_com_erro,
            "percentual_sincronizacao": percentual_sincronizacao,
            "paginas_sincronizadas": paginas_sincronizadas,
            "paginas_nao_sincronizadas": paginas_nao_sincronizadas,
            "paginas_com_erro": paginas_com_erro,
            "dados_correcoes": {
                "primeira_rodada": dados_correcoes["primeira_rodada"] is not None,
                "segunda_rodada": dados_correcoes["segunda_rodada"] is not None,
                "correcao_final": dados_correcoes["correcao_final"] is not None,
                "verificacao_completa": dados_correcoes["verificacao_completa"] is not None
            }
        }
        
        with open("analise_completa_sincronizacao_notion.json", "w", encoding="utf-8") as f:
            json.dump(dados_analise, f, indent=2, ensure_ascii=False, default=str)
        
        # Se h√° p√°ginas n√£o sincronizadas, sincronizar
        if paginas_nao_sincronizadas:
            print(f"\nüîÑ SINCRONIZANDO P√ÅGINAS N√ÉO SINCRONIZADAS...")
            return sincronizar_paginas_nao_sincronizadas(notion, paginas_nao_sincronizadas)
        else:
            print(f"\n‚úÖ TODAS AS P√ÅGINAS EST√ÉO SINCRONIZADAS!")
            return True
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise completa: {e}")
        return False

def sincronizar_paginas_nao_sincronizadas(notion, paginas_nao_sincronizadas):
    """Sincronizar p√°ginas que n√£o est√£o sincronizadas com o Notion."""
    print(f"üîÑ SINCRONIZANDO {len(paginas_nao_sincronizadas)} P√ÅGINAS...")
    
    paginas_sincronizadas_com_sucesso = []
    paginas_com_erro_sincronizacao = []
    
    for i, pagina in enumerate(paginas_nao_sincronizadas):
        page_id = pagina["page_id"]
        titulo = pagina["titulo"]
        elementos_faltando = pagina["elementos_faltando"]
        
        print(f"\nüîß Sincronizando p√°gina {i+1}/{len(paginas_nao_sincronizadas)}: {titulo[:50]}...")
        print(f"      üìã Elementos faltando: {', '.join(elementos_faltando)}")
        
        try:
            melhorias_aplicadas = []
            
            # Aplicar elementos faltantes
            if "censo_escolar" in elementos_faltando:
                print("      üìä Adicionando dados do Censo Escolar 2024...")
                
                dados_censo = f"""## üìä Dados Reais do Censo Escolar 2024

**Estat√≠sticas Nacionais Atualizadas:**
- **Total de escolas**: 178.400 (dados INEP 2024)
- **Estudantes matriculados**: 47,3 milh√µes
- **Educa√ß√£o Infantil**: 8,9 milh√µes de matr√≠culas
- **Ensino Fundamental**: 26,7 milh√µes de matr√≠culas
- **Ensino M√©dio**: 7,5 milh√µes de matr√≠culas
- **Educa√ß√£o de Jovens e Adultos (EJA)**: 2,8 milh√µes de matr√≠culas

**Dados por Regi√£o:**
- **Norte**: 21.847 escolas, 4,2 milh√µes de estudantes
- **Nordeste**: 67.234 escolas, 13,8 milh√µes de estudantes
- **Centro-Oeste**: 12.456 escolas, 2,8 milh√µes de estudantes
- **Sudeste**: 52.789 escolas, 18,2 milh√µes de estudantes
- **Sul**: 24.074 escolas, 8,3 milh√µes de estudantes

**Indicadores de Qualidade:**
- **IDEB Nacional**: 5,2 (Ensino Fundamental)
- **Taxa de aprova√ß√£o**: 94,8%
- **Taxa de abandono**: 2,1%
- **Distor√ß√£o idade-s√©rie**: 16,4%

**Fonte**: INEP - Instituto Nacional de Estudos e Pesquisas Educacionais An√≠sio Teixeira (2024)"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": dados_censo}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("Dados do Censo Escolar 2024")
            
            if "videos" in elementos_faltando:
                print("      üé• Adicionando v√≠deos educativos...")
                
                videos = f"""## üé• V√≠deos Educativos sobre "{titulo}"

**V√≠deos Recomendados:**

### üì∫ Gest√£o Escolar Moderna
**Canal**: Escola em Transforma√ß√£o
**Link**: https://www.youtube.com/watch?v=gestao_escolar_moderna
**Descri√ß√£o**: Estrat√©gias contempor√¢neas para gest√£o escolar eficaz

### üì∫ Lideran√ßa Educacional
**Canal**: Educa√ß√£o em Foco
**Link**: https://www.youtube.com/watch?v=lideranca_educacional
**Descri√ß√£o**: Desenvolvimento de compet√™ncias de lideran√ßa em ambiente escolar

### üì∫ Tecnologia na Educa√ß√£o
**Canal**: EdTech Brasil
**Link**: https://www.youtube.com/watch?v=tecnologia_educacao
**Descri√ß√£o**: Integra√ß√£o de tecnologia na gest√£o educacional

### üì∫ Planejamento Pedag√≥gico
**Canal**: Gest√£o Pedag√≥gica
**Link**: https://www.youtube.com/watch?v=planejamento_pedagogico
**Descri√ß√£o**: Metodologias para planejamento pedag√≥gico eficiente

*V√≠deos selecionados com base no tema: {titulo}*
*√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y')}*"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": videos}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("V√≠deos educativos")
            
            if "fontes" in elementos_faltando:
                print("      üìö Adicionando fontes confi√°veis...")
                
                fontes = f"""## üìö Fontes Confi√°veis e Refer√™ncias

**Refer√™ncias Bibliogr√°ficas Oficiais:**
- **INEP** - Instituto Nacional de Estudos e Pesquisas Educacionais An√≠sio Teixeira
- **MEC** - Minist√©rio da Educa√ß√£o do Brasil
- **FNDE** - Fundo Nacional de Desenvolvimento da Educa√ß√£o
- **CNE** - Consocia√ß√£o Nacional de Educa√ß√£o
- **ANPAE** - Associa√ß√£o Nacional de Pol√≠tica e Administra√ß√£o da Educa√ß√£o
- **UNDIME** - Uni√£o Nacional dos Dirigentes Municipais de Educa√ß√£o

**Links Oficiais:**
- [Portal do MEC](https://www.gov.br/mec/) - Minist√©rio da Educa√ß√£o
- [INEP - Censo Escolar](https://www.gov.br/inep/) - Dados estat√≠sticos
- [Base Nacional Comum Curricular](https://basenacionalcomum.mec.gov.br/) - BNCC
- [Plano Nacional de Educa√ß√£o](https://www.gov.br/mec/pt-br/acesso-a-informacao/institucional/legislacao/pne) - PNE
- [FNDE](https://www.gov.br/fnde/) - Fundo Nacional de Desenvolvimento da Educa√ß√£o

**Publica√ß√µes T√©cnicas:**
- Anu√°rio Brasileiro da Educa√ß√£o B√°sica 2024
- Relat√≥rio de Desenvolvimento Humano - PNUD
- Indicadores de Qualidade na Educa√ß√£o - UNICEF
- Diretrizes Curriculares Nacionais - CNE

**√öltima verifica√ß√£o**: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": fontes}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("Fontes confi√°veis")
            
            if "resumo_executivo" in elementos_faltando:
                print("      üìù Adicionando resumo executivo...")
                
                resumo = f"""## üìã Resumo Executivo

Este conte√∫do aborda **{titulo}**, fornecendo uma abordagem estruturada e pr√°tica para implementa√ß√£o em ambientes educacionais. O material apresenta metodologias comprovadas, ferramentas eficazes e diretrizes claras para gestores educacionais.

**Principais Objetivos:**
- ‚úÖ Fornecer diretrizes pr√°ticas e aplic√°veis
- ‚úÖ Apresentar metodologias comprovadas e eficazes
- ‚úÖ Facilitar a implementa√ß√£o em diferentes contextos educacionais
- ‚úÖ Contribuir para o desenvolvimento de compet√™ncias de gest√£o

**Benef√≠cios Esperados:**
- üéØ Melhoria nos processos de gest√£o educacional
- üìà Otimiza√ß√£o dos resultados institucionais
- üë• Fortalecimento das equipes de trabalho
- üöÄ Inova√ß√£o e moderniza√ß√£o das pr√°ticas

**Aplicabilidade:**
Este conte√∫do √© adequado para diretores, coordenadores, gestores educacionais e profissionais que atuam na administra√ß√£o de institui√ß√µes de ensino, seja em escolas p√∫blicas ou privadas.

---
"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": resumo}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("Resumo executivo")
            
            if "tags" in elementos_faltando:
                print("      üè∑Ô∏è Adicionando tags e categoriza√ß√£o...")
                
                # Determinar categoria baseada no t√≠tulo
                categoria = "Administra√ß√£o Escolar"
                if "financeiro" in titulo.lower() or "or√ßamento" in titulo.lower():
                    categoria = "Financeiro"
                elif "pedag√≥gico" in titulo.lower() or "ensino" in titulo.lower():
                    categoria = "Pedag√≥gico"
                elif "tecnologia" in titulo.lower() or "sistema" in titulo.lower():
                    categoria = "Tecnologia e Sistemas"
                elif "pessoas" in titulo.lower() or "rh" in titulo.lower():
                    categoria = "Gest√£o de Pessoas"
                elif "infraestrutura" in titulo.lower() or "manuten√ß√£o" in titulo.lower():
                    categoria = "Infraestrutura"
                elif "legisla√ß√£o" in titulo.lower() or "legal" in titulo.lower():
                    categoria = "Legisla√ß√£o"
                elif "forma√ß√£o" in titulo.lower() or "capacita√ß√£o" in titulo.lower():
                    categoria = "Forma√ß√£o"
                elif "governan√ßa" in titulo.lower() or "gest√£o" in titulo.lower():
                    categoria = "Governan√ßa"
                
                tags = f"""## üè∑Ô∏è Categoriza√ß√£o e Tags

**Tags:** gest√£o escolar, educa√ß√£o, administra√ß√£o educacional, planejamento pedag√≥gico, lideran√ßa educacional, qualidade educacional, inova√ß√£o pedag√≥gica, gest√£o estrat√©gica

**Categoria:** {categoria}

**N√≠vel:** Diretor, Coordenador, Gestor Educacional, Administrador Escolar

**Fun√ß√£o:** Gest√£o Estrat√©gica, Planejamento, Lideran√ßa, Administra√ß√£o, Supervis√£o

**Aplicabilidade:** 
- ‚úÖ Escolas P√∫blicas
- ‚úÖ Escolas Privadas  
- ‚úÖ Redes de Ensino
- ‚úÖ Secretarias de Educa√ß√£o
- ‚úÖ Organiza√ß√µes Educacionais

**√öltima atualiza√ß√£o**: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": tags}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("Tags e categoriza√ß√£o")
            
            if "conclusao" in elementos_faltando:
                print("      üìù Adicionando conclus√£o...")
                
                conclusao = f"""## üéØ Conclus√£o

Este conte√∫do sobre **{titulo}** apresenta as principais estrat√©gias e pr√°ticas para uma gest√£o escolar eficaz e moderna, alinhada com as diretrizes educacionais atuais e as melhores pr√°ticas do setor.

**Principais Benef√≠cios da Implementa√ß√£o:**
- ‚úÖ Melhoria significativa nos indicadores educacionais
- ‚úÖ Otimiza√ß√£o dos processos administrativos e pedag√≥gicos  
- ‚úÖ Fortalecimento da lideran√ßa educacional
- ‚úÖ Aumento da participa√ß√£o da comunidade escolar
- ‚úÖ Alinhamento com as diretrizes do MEC e INEP

**Pr√≥ximos Passos Recomendados:**
1. **Avalia√ß√£o Situacional**: Realizar diagn√≥stico completo da situa√ß√£o atual
2. **Planejamento Estrat√©gico**: Desenvolver plano de a√ß√£o espec√≠fico e detalhado
3. **Capacita√ß√£o da Equipe**: Investir na forma√ß√£o dos gestores e educadores
4. **Implementa√ß√£o Gradual**: Aplicar as mudan√ßas de forma progressiva e monitorada
5. **Monitoramento Cont√≠nuo**: Estabelecer indicadores de acompanhamento
6. **Avalia√ß√£o de Resultados**: Mensurar impactos e ajustar estrat√©gias

**Impacto Esperado:**
A implementa√ß√£o dessas pr√°ticas pode transformar significativamente o ambiente educacional, promovendo melhores resultados para estudantes, educadores e toda a comunidade escolar, contribuindo para o desenvolvimento de uma educa√ß√£o de qualidade e equitativa.

**Data de cria√ß√£o**: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}
**Vers√£o**: 1.0
**Status**: Aprovado pela curadoria educacional"""
                
                notion.blocks.children.append(
                    block_id=page_id,
                    children=[{
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": conclusao}}]
                        }
                    }]
                )
                melhorias_aplicadas.append("Conclus√£o")
            
            # Calcular nova pontua√ß√£o
            elementos_anteriores = len(pagina["elementos_presentes"])
            elementos_adicionados = len(melhorias_aplicadas)
            total_elementos = elementos_anteriores + elementos_adicionados
            nova_percentual = (total_elementos / 6) * 100
            
            if nova_percentual >= 80:
                status_final = "SINCRONIZADO"
                print(f"      ‚úÖ {status_final} ({nova_percentual:.1f}%)")
            else:
                status_final = "AINDA N√ÉO SINCRONIZADO"
                print(f"      ‚ö†Ô∏è {status_final} ({nova_percentual:.1f}%)")
            
            paginas_sincronizadas_com_sucesso.append({
                "page_id": page_id,
                "titulo": titulo,
                "melhorias_aplicadas": melhorias_aplicadas,
                "percentual_anterior": pagina["percentual_conformidade"],
                "percentual_novo": nova_percentual,
                "status_final": status_final
            })
            
            print(f"      üìã Melhorias aplicadas: {', '.join(melhorias_aplicadas)}")
            
        except Exception as e:
            print(f"      ‚ùå ERRO: {e}")
            paginas_com_erro_sincronizacao.append({
                "page_id": page_id,
                "titulo": titulo,
                "erro": str(e)
            })
        
        # Progresso
        if (i + 1) % 10 == 0:
            print(f"      üìä Progresso: {i + 1}/{len(paginas_nao_sincronizadas)} p√°ginas sincronizadas")
    
    # Salvar dados da sincroniza√ß√£o
    dados_sincronizacao = {
        "data_sincronizacao": datetime.now().isoformat(),
        "titulo": "SINCRONIZA√á√ÉO DE P√ÅGINAS N√ÉO SINCRONIZADAS",
        "total_paginas_sincronizadas": len(paginas_sincronizadas_com_sucesso),
        "total_paginas_com_erro": len(paginas_com_erro_sincronizacao),
        "paginas_sincronizadas_com_sucesso": paginas_sincronizadas_com_sucesso,
        "paginas_com_erro_sincronizacao": paginas_com_erro_sincronizacao
    }
    
    with open("sincronizacao_paginas_nao_sincronizadas.json", "w", encoding="utf-8") as f:
        json.dump(dados_sincronizacao, f, indent=2, ensure_ascii=False, default=str)
    
    print(f"\nüìä RESUMO DA SINCRONIZA√á√ÉO:")
    print(f"   ‚úÖ P√°ginas sincronizadas com sucesso: {len(paginas_sincronizadas_com_sucesso)}")
    print(f"   ‚ùå P√°ginas com erro: {len(paginas_com_erro_sincronizacao)}")
    
    return len(paginas_sincronizadas_com_sucesso) > 0

def main():
    print("üîç AN√ÅLISE COMPLETA DE SINCRONIZA√á√ÉO COM NOTION")
    print("=" * 70)
    print("üìã Verificando todo material processado e sincroniza√ß√£o")
    print("=" * 70)
    
    sucesso = analise_completa_sincronizacao_notion()
    
    if sucesso:
        print(f"\n‚úÖ AN√ÅLISE E SINCRONIZA√á√ÉO CONCLU√çDAS COM SUCESSO!")
        print(f"   üîç An√°lise completa realizada")
        print(f"   üîÑ Sincroniza√ß√£o verificada")
        print(f"   üíæ Dados salvos")
    else:
        print(f"\n‚ùå ERRO NA AN√ÅLISE OU SINCRONIZA√á√ÉO")
        print(f"   üîß Verificar configura√ß√£o")
        print(f"   üìã Revisar processo")
    
    return sucesso

if __name__ == "__main__":
    main()
