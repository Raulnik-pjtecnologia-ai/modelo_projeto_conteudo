import os
import json
from datetime import datetime
from notion_client import Client
from dotenv import load_dotenv

def verificacao_manual():
    """Verifica√ß√£o manual para confirmar se as corre√ß√µes foram aplicadas."""
    print("üîç VERIFICA√á√ÉO MANUAL - CONFIRMA√á√ÉO DE CORRE√á√ïES")
    print("=" * 80)
    
    # Carregar configura√ß√£o
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    
    if not notion_token:
        print("‚ùå Configura√ß√£o do Notion n√£o encontrada")
        return False
    
    # Inicializar cliente Notion
    notion = Client(auth=notion_token)
    
    try:
        # Carregar dados da verifica√ß√£o melhorada
        with open("verificacao_melhorada.json", "r", encoding="utf-8") as f:
            dados_verificacao = json.load(f)
        
        paginas_nao_conformes = dados_verificacao["paginas_nao_conformes"]
        
        print(f"üîç VERIFICA√á√ÉO MANUAL DE {len(paginas_nao_conformes)} P√ÅGINAS N√ÉO CONFORMES...")
        
        # Verificar apenas as primeiras 5 p√°ginas para an√°lise detalhada
        paginas_amostra = paginas_nao_conformes[:5]
        
        for i, pagina in enumerate(paginas_amostra):
            page_id = pagina["page_id"]
            titulo = pagina["titulo"]
            criterios_faltando = pagina["criterios_faltando"]
            percentual_atual = pagina["percentual_final"]
            
            print(f"\nüìÑ P√ÅGINA {i+1}: {titulo[:60]}...")
            print(f"   üìä Percentual atual: {percentual_atual:.1f}%")
            print(f"   üîß Crit√©rios faltando: {', '.join(criterios_faltando)}")
            print("   " + "="*60)
            
            try:
                # Buscar p√°gina no Notion
                page = notion.pages.retrieve(page_id)
                
                # Buscar blocos da p√°gina
                blocks_response = notion.blocks.children.list(page_id)
                blocks = blocks_response.get("results", [])
                
                print(f"   üìã Total de blocos encontrados: {len(blocks)}")
                
                # Analisar cada bloco em detalhes
                for j, block in enumerate(blocks):
                    block_type = block.get("type", "unknown")
                    
                    if block_type in ["paragraph", "heading_1", "heading_2", "heading_3", "bulleted_list_item", "numbered_list_item"]:
                        rich_text = block.get(block_type, {}).get("rich_text", [])
                        if rich_text:
                            texto_bloco = "".join([rt["text"]["content"] for rt in rich_text])
                            
                            # Verificar se cont√©m elementos do boilerplate
                            if any(palavra in texto_bloco.lower() for palavra in ["censo escolar", "2024", "inep"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM CENSO ESCOLAR")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["youtube", "v√≠deos", "video", "üé•"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM V√çDEOS")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["fonte:", "refer√™ncia", "mec", "inep", "fnde", "üìö"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM FONTES")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["resumo", "executivo", "sum√°rio", "objetivos", "üìã"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM RESUMO EXECUTIVO")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["tags:", "**tags**", "categoria:", "**categoria**", "üè∑Ô∏è"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM TAGS")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["conclus√£o", "conclusao", "finalizando", "pr√≥ximos passos", "üéØ"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM CONCLUS√ÉO")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["dados", "estat√≠sticas", "indicadores", "m√©tricas", "üìä"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM DADOS REAIS")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["metodologia", "aplicabilidade", "implementa√ß√£o", "processo", "üîß"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM METODOLOGIA")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                            
                            if any(palavra in texto_bloco.lower() for palavra in ["qualidade", "educacional", "pedag√≥gico", "gest√£o", "üèÜ"]):
                                print(f"      ‚úÖ Bloco {j+1} ({block_type}): CONT√âM QUALIDADE")
                                print(f"         üìù Texto: {texto_bloco[:100]}...")
                
                # Verificar crit√©rios espec√≠ficos que estavam faltando
                print(f"\n   üîç VERIFICA√á√ÉO ESPEC√çFICA DOS CRIT√âRIOS FALTANDO:")
                
                # Converter todos os blocos para texto
                conteudo_completo = ""
                for block in blocks:
                    if block.get("type") in ["paragraph", "heading_1", "heading_2", "heading_3", "bulleted_list_item", "numbered_list_item"]:
                        rich_text = block.get(block["type"], {}).get("rich_text", [])
                        if rich_text:
                            texto_bloco = "".join([rt["text"]["content"] for rt in rich_text])
                            conteudo_completo += texto_bloco + "\n"
                
                for criterio in criterios_faltando:
                    if criterio == "censo_escolar":
                        palavras_censo = ["censo escolar", "2024", "inep", "estat√≠sticas nacionais", "dados do censo", "censo 2024"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_censo)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Censo Escolar 2024")
                    
                    elif criterio == "videos":
                        palavras_videos = ["youtube", "v√≠deos", "video", "üé•", "v√≠deos educativos", "youtube.com"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_videos)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - V√≠deos educativos")
                    
                    elif criterio == "fontes":
                        palavras_fontes = ["fonte:", "refer√™ncia", "mec", "inep", "fnde", "üìö", "fontes", "refer√™ncias"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_fontes)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Fontes confi√°veis")
                    
                    elif criterio == "resumo_executivo":
                        palavras_resumo = ["resumo", "executivo", "sum√°rio", "objetivos", "üìã", "resumo executivo"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_resumo)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Resumo executivo")
                    
                    elif criterio == "tags":
                        palavras_tags = ["tags:", "**tags**", "categoria:", "**categoria**", "üè∑Ô∏è", "tags", "categoria"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_tags)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Tags e categoriza√ß√£o")
                    
                    elif criterio == "conclusao":
                        palavras_conclusao = ["conclus√£o", "conclusao", "finalizando", "pr√≥ximos passos", "üéØ", "conclus√£o"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_conclusao)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Conclus√£o")
                    
                    elif criterio == "dados_reais":
                        palavras_dados = ["dados", "estat√≠sticas", "indicadores", "m√©tricas", "üìä", "dados reais"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_dados)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Dados reais")
                    
                    elif criterio == "metodologia":
                        palavras_metodologia = ["metodologia", "aplicabilidade", "implementa√ß√£o", "processo", "üîß", "metodologia"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_metodologia)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Metodologia")
                    
                    elif criterio == "qualidade":
                        palavras_qualidade = ["qualidade", "educacional", "pedag√≥gico", "gest√£o", "üèÜ", "qualidade educacional"]
                        encontrado = any(palavra in conteudo_completo.lower() for palavra in palavras_qualidade)
                        status = "‚úÖ ENCONTRADO" if encontrado else "‚ùå N√ÉO ENCONTRADO"
                        print(f"      {status} - Qualidade educacional")
                
            except Exception as e:
                print(f"      ‚ùå ERRO: {e}")
            
            print(f"   " + "="*60)
        
        print(f"\nüìä RESUMO DA VERIFICA√á√ÉO MANUAL:")
        print(f"   üìÑ P√°ginas analisadas: {len(paginas_amostra)}")
        print(f"   üîç An√°lise detalhada conclu√≠da")
        print(f"   üíæ Verifica√ß√£o manual finalizada")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o manual: {e}")
        return False

def main():
    print("üîç VERIFICA√á√ÉO MANUAL - CONFIRMA√á√ÉO DE CORRE√á√ïES")
    print("=" * 80)
    print("üìã Verificando manualmente se as corre√ß√µes foram aplicadas")
    print("=" * 80)
    
    sucesso = verificacao_manual()
    
    if sucesso:
        print(f"\nüèÜ VERIFICA√á√ÉO MANUAL CONCLU√çDA COM SUCESSO!")
        print(f"   üîç An√°lise detalhada realizada")
        print(f"   üìä Corre√ß√µes verificadas")
        print(f"   üíæ Verifica√ß√£o manual finalizada")
    else:
        print(f"\n‚ùå ERRO NA VERIFICA√á√ÉO MANUAL")
        print(f"   üîß Verificar configura√ß√µes")
        print(f"   üìã Revisar implementa√ß√£o")
    
    return sucesso

if __name__ == "__main__":
    main()
