import os
import glob
from datetime import datetime

def avaliar_conteudo(filepath):
    """Avalia conte√∫do seguindo crit√©rios de curadoria para Gest√£o Escolar"""
    
    try:
        with open(filepath, 'r', encoding='utf-8') as f:
            content = f.read()
        
        criterios = {}
        pontuacao = 0
        
        # Crit√©rio 1: Estrutura (20 pontos)
        estrutura_score = 0
        
        # Verificar t√≠tulo
        if content.startswith('#'):
            estrutura_score += 5
        
        # Verificar se√ß√µes obrigat√≥rias
        secoes_obrigatorias = [
            "Resumo Executivo",
            "Contexto e Desafios", 
            "Aplica√ß√£o Pr√°tica",
            "Conclus√£o",
            "Checklist Inicial"
        ]
        
        secoes_presentes = 0
        for secao in secoes_obrigatorias:
            if secao in content:
                secoes_presentes += 1
        
        estrutura_score += (secoes_presentes / len(secoes_obrigatorias)) * 15
        criterios['Estrutura'] = min(20, estrutura_score)
        pontuacao += criterios['Estrutura']
        
        # Crit√©rio 2: Conte√∫do (20 pontos)
        conteudo_score = 0
        
        # Verificar tamanho m√≠nimo (deve ter pelo menos 1000 caracteres)
        if len(content) >= 1000:
            conteudo_score += 10
        
        # Verificar presen√ßa de exemplos pr√°ticos
        if "exemplo" in content.lower() or "caso" in content.lower():
            conteudo_score += 5
        
        # Verificar presen√ßa de estrat√©gias
        if "estrat√©gia" in content.lower() or "implementa√ß√£o" in content.lower():
            conteudo_score += 5
        
        criterios['Conte√∫do'] = min(20, conteudo_score)
        pontuacao += criterios['Conte√∫do']
        
        # Crit√©rio 3: Apresenta√ß√£o (20 pontos)
        apresentacao_score = 0
        
        # Verificar formata√ß√£o markdown
        if "##" in content:  # Subt√≠tulos
            apresentacao_score += 5
        
        # Verificar listas
        if "- [" in content or "1." in content:
            apresentacao_score += 5
        
        # Verificar emojis para organiza√ß√£o
        emojis_presentes = content.count("üìã") + content.count("üéØ") + content.count("üí°") + content.count("üöÄ")
        apresentacao_score += min(10, emojis_presentes * 2)
        
        criterios['Apresenta√ß√£o'] = min(20, apresentacao_score)
        pontuacao += criterios['Apresenta√ß√£o']
        
        # Crit√©rio 4: Conformidade Gest√£o (20 pontos)
        conformidade_score = 0
        
        # Verificar termos espec√≠ficos de gest√£o escolar
        termos_gestao = [
            "gest√£o", "escolar", "educacional", "institui√ß√£o", 
            "pedag√≥gico", "administrativo", "lideran√ßa", "equipe"
        ]
        
        termos_presentes = sum(1 for termo in termos_gestao if termo in content.lower())
        conformidade_score = min(20, (termos_presentes / len(termos_gestao)) * 20)
        
        criterios['Conformidade Gest√£o'] = conformidade_score
        pontuacao += criterios['Conformidade Gest√£o']
        
        # Crit√©rio 5: Qualidade T√©cnica (20 pontos)
        qualidade_score = 0
        
        # Verificar refer√™ncias
        if "refer√™ncias" in content.lower() or "fontes" in content.lower():
            qualidade_score += 10
        
        # Verificar checklist
        if "checklist" in content.lower() or "- [" in content:
            qualidade_score += 10
        
        criterios['Qualidade T√©cnica'] = qualidade_score
        pontuacao += criterios['Qualidade T√©cnica']
        
        return pontuacao, criterios
        
    except Exception as e:
        print(f"Erro ao avaliar {filepath}: {str(e)}")
        return 0, {}

def main():
    print("================================================================================")
    print("CURADORIA AUTOM√ÅTICA - CONTE√öDOS GEST√ÉO ESCOLAR")
    print("================================================================================")
    print(f"Data: {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    print("üéØ Objetivo: Avaliar qualidade de 40 novos conte√∫dos de gest√£o")
    
    # Buscar todos os arquivos de gest√£o
    gestao_files = glob.glob("2_conteudo/02_conteudos_prontos/gestao_escolar/**/*.md", recursive=True)
    
    print(f"\nüìä Total de conte√∫dos encontrados: {len(gestao_files)}")
    
    if not gestao_files:
        print("‚ùå Nenhum arquivo de gest√£o encontrado")
        return
    
    print("üîç Iniciando avalia√ß√£o...")
    
    aprovados = 0
    em_revisao = 0
    rejeitados = 0
    total_score = 0
    
    for i, filepath in enumerate(gestao_files, 1):
        filename = os.path.basename(filepath)
        print(f"\n--- Conte√∫do {i}/{len(gestao_files)} ---")
        print(f"Arquivo: {filename}")
        
        pontuacao, criterios = avaliar_conteudo(filepath)
        total_score += pontuacao
        
        print(f"   üìä Estrutura: {criterios.get('Estrutura', 0)}/20")
        print(f"   üìù Conte√∫do: {criterios.get('Conte√∫do', 0)}/20")
        print(f"   üéØ Apresenta√ß√£o: {criterios.get('Apresenta√ß√£o', 0)}/20")
        print(f"   üè´ Conformidade Gest√£o: {criterios.get('Conformidade Gest√£o', 0)}/20")
        print(f"   ‚úÖ Qualidade T√©cnica: {criterios.get('Qualidade T√©cnica', 0)}/20")
        print(f"   üéØ TOTAL: {pontuacao}/100")
        
        if pontuacao >= 85:
            print(f"   ‚úÖ APROVADO")
            aprovados += 1
        elif pontuacao >= 70:
            print(f"   ‚ö†Ô∏è EM REVIS√ÉO")
            em_revisao += 1
        else:
            print(f"   ‚ùå REJEITADO")
            rejeitados += 1
    
    # Relat√≥rio final
    avg_score = total_score / len(gestao_files) if gestao_files else 0
    
    print("\n================================================================================")
    print("RELAT√ìRIO FINAL DA CURADORIA")
    print("================================================================================")
    print(f"üìä Total de conte√∫dos avaliados: {len(gestao_files)}")
    print(f"‚úÖ Aprovados (‚â•85%): {aprovados}")
    print(f"‚ö†Ô∏è Em Revis√£o (70-84%): {em_revisao}")
    print(f"‚ùå Rejeitados (<70%): {rejeitados}")
    print(f"üìà Pontua√ß√£o m√©dia: {avg_score:.1f}/100")
    print(f"üéØ Taxa de aprova√ß√£o: {(aprovados/len(gestao_files)*100):.1f}%")
    
    # Salvar relat√≥rio
    relatorio = {
        "timestamp": datetime.now().isoformat(),
        "total_conteudos": len(gestao_files),
        "aprovados": aprovados,
        "em_revisao": em_revisao,
        "rejeitados": rejeitados,
        "pontuacao_media": avg_score,
        "taxa_aprovacao": (aprovados/len(gestao_files)*100) if gestao_files else 0
    }
    
    with open("relatorio_curadoria_gestao.json", "w", encoding="utf-8") as f:
        import json
        json.dump(relatorio, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ Relat√≥rio salvo em: relatorio_curadoria_gestao.json")
    
    if aprovados == len(gestao_files):
        print("\nüéâ TODOS OS CONTE√öDOS APROVADOS! PRONTO PARA SINCRONIZA√á√ÉO!")
    else:
        print(f"\n‚ö†Ô∏è {len(gestao_files) - aprovados} conte√∫dos precisam de revis√£o")

if __name__ == "__main__":
    main()
