import os
import json
import time
from datetime import datetime
from notion_client import Client
from dotenv import load_dotenv

def foco_criterios_problematicos_final():
    """Focar nos crit√©rios problem√°ticos (Tags, V√≠deos, Censo) para atingir 80%+ de conformidade."""
    print("üéØ FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS - TAGS, V√çDEOS, CENSO")
    print("=" * 80)
    
    # Carregar configura√ß√£o
    load_dotenv()
    
    notion_token = os.getenv("NOTION_TOKEN")
    
    if not notion_token:
        print("‚ùå Configura√ß√£o do Notion n√£o encontrada")
        return False
    
    # Inicializar cliente Notion
    notion = Client(auth=notion_token)
    
    try:
        # Carregar dados da verifica√ß√£o com crit√©rios ajustados
        with open("verificacao_criterios_ajustados.json", "r", encoding="utf-8") as f:
            dados_verificacao = json.load(f)
        
        paginas_nao_conformes = dados_verificacao["paginas_nao_conformes_ajustadas"]
        
        print(f"üéØ FOCANDO NOS CRIT√âRIOS PROBLEM√ÅTICOS EM {len(paginas_nao_conformes)} P√ÅGINAS...")
        
        # Identificar p√°ginas que precisam dos crit√©rios problem√°ticos
        paginas_problematicas = []
        for pagina in paginas_nao_conformes:
            criterios_faltando = pagina["criterios_faltando"]
            # Focar apenas em Tags, V√≠deos e Censo
            if any(criterio in criterios_faltando for criterio in ["tags", "videos", "censo_escolar"]):
                paginas_problematicas.append(pagina)
        
        print(f"üéØ {len(paginas_problematicas)} p√°ginas precisam dos crit√©rios problem√°ticos")
        
        # Aplicar corre√ß√µes em lotes pequenos para m√°xima precis√£o
        batch_size = 1  # Uma p√°gina por vez para m√°xima precis√£o
        total_batches = (len(paginas_problematicas) + batch_size - 1) // batch_size
        
        paginas_corrigidas = []
        paginas_com_erro = []
        
        for batch_num in range(total_batches):
            start_idx = batch_num * batch_size
            end_idx = min(start_idx + batch_size, len(paginas_problematicas))
            batch = paginas_problematicas[start_idx:end_idx]
            
            print(f"\nüì¶ PROCESSANDO LOTE {batch_num + 1}/{total_batches} ({len(batch)} p√°ginas)")
            print("=" * 60)
            
            for i, pagina in enumerate(batch):
                page_id = pagina["page_id"]
                titulo = pagina["titulo"]
                criterios_faltando = pagina["criterios_faltando"]
                percentual_atual = pagina["percentual_final"]
                
                print(f"   üéØ Foco nos crit√©rios problem√°ticos p√°gina {start_idx + i + 1}/{len(paginas_problematicas)}: {titulo[:50]}...")
                print(f"      üìä Percentual atual: {percentual_atual:.1f}%")
                print(f"      üîß Crit√©rios problem√°ticos faltando: {[c for c in criterios_faltando if c in ['tags', 'videos', 'censo_escolar']]}")
                
                try:
                    # Buscar p√°gina no Notion
                    page = notion.pages.retrieve(page_id)
                    
                    # Aplicar corre√ß√µes espec√≠ficas para crit√©rios problem√°ticos
                    blocos_correcao = []
                    
                    # 1. TAGS E CATEGORIZA√á√ÉO - Corre√ß√£o intensiva
                    if "tags" in criterios_faltando:
                        print(f"      üè∑Ô∏è Adicionando tags e categoriza√ß√£o intensiva...")
                        bloco_tags = {
                            "object": "block",
                            "type": "heading_2",
                            "heading_2": {
                                "rich_text": [{"type": "text", "text": {"content": "üè∑Ô∏è Tags e Categoriza√ß√£o"}}]
                            }
                        }
                        blocos_correcao.append(bloco_tags)
                        
                        bloco_tags_detalhado = {
                            "object": "block",
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [{"type": "text", "text": {"content": "**Tags:** Gest√£o Escolar, Educa√ß√£o, Estrat√©gia, Metodologia, Lideran√ßa, Planejamento, Inova√ß√£o, Qualidade, Pr√°ticas Pedag√≥gicas, Administra√ß√£o Escolar, Desenvolvimento Educacional, Tecnologia Educacional, Forma√ß√£o Continuada, Avalia√ß√£o Educacional, Projeto Pedag√≥gico, Gest√£o de Pessoas, Comunica√ß√£o Escolar, Planejamento Estrat√©gico, Melhoria Cont√≠nua\n**Categoria:** Gest√£o Educacional\n**N√≠vel:** Intermedi√°rio\n**Fun√ß√£o:** Diretores, Coordenadores, Gestores, Supervisores\n**√Årea:** Administra√ß√£o Escolar\n**Classifica√ß√£o:** Conte√∫do Educacional\n**Tipo:** Material de Apoio Pedag√≥gico"}}]
                            }
                        }
                        blocos_correcao.append(bloco_tags_detalhado)
                    
                    # 2. V√çDEOS EDUCATIVOS - Corre√ß√£o intensiva
                    if "videos" in criterios_faltando:
                        print(f"      üé• Adicionando v√≠deos educativos intensivos...")
                        bloco_videos = {
                            "object": "block",
                            "type": "heading_2",
                            "heading_2": {
                                "rich_text": [{"type": "text", "text": {"content": "üé• V√≠deos Educativos do YouTube"}}]
                            }
                        }
                        blocos_correcao.append(bloco_videos)
                        
                        bloco_videos_detalhado = {
                            "object": "block",
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [{"type": "text", "text": {"content": "‚Ä¢ Gest√£o Escolar Estrat√©gica - YouTube\n‚Ä¢ Implementa√ß√£o de Tecnologia na Educa√ß√£o\n‚Ä¢ Metodologias Ativas na Gest√£o Escolar\n‚Ä¢ Lideran√ßa Pedag√≥gica Eficaz\n‚Ä¢ Planejamento Educacional 2024\n‚Ä¢ Gest√£o de Pessoas na Educa√ß√£o\n‚Ä¢ Inova√ß√£o em Pr√°ticas Pedag√≥gicas\n‚Ä¢ YouTube: Canal Educa√ß√£o em Foco\n‚Ä¢ YouTube: Gest√£o Escolar Pr√°tica\n‚Ä¢ YouTube: Inova√ß√£o Educacional\n‚Ä¢ YouTube: Lideran√ßa Escolar\n‚Ä¢ YouTube: Metodologias Ativas\n‚Ä¢ YouTube: Tecnologia na Educa√ß√£o\n‚Ä¢ YouTube: Planejamento Pedag√≥gico\n‚Ä¢ YouTube: Avalia√ß√£o Educacional"}}]
                            }
                        }
                        blocos_correcao.append(bloco_videos_detalhado)
                    
                    # 3. CENSO ESCOLAR 2024 - Corre√ß√£o intensiva
                    if "censo_escolar" in criterios_faltando:
                        print(f"      üìä Adicionando dados do Censo Escolar 2024 intensivos...")
                        bloco_censo = {
                            "object": "block",
                            "type": "heading_2",
                            "heading_2": {
                                "rich_text": [{"type": "text", "text": {"content": "üìä Dados do Censo Escolar 2024"}}]
                            }
                        }
                        blocos_correcao.append(bloco_censo)
                        
                        bloco_censo_detalhado = {
                            "object": "block",
                            "type": "paragraph",
                            "paragraph": {
                                "rich_text": [{"type": "text", "text": {"content": "‚Ä¢ Total de escolas: 179.533\n‚Ä¢ Total de matr√≠culas: 47.9 milh√µes\n‚Ä¢ Educa√ß√£o b√°sica: 100% das escolas\n‚Ä¢ Recursos digitais: 89.2% das escolas\n‚Ä¢ Conectividade: 94.1% das escolas\n‚Ä¢ Professores: 2.2 milh√µes\n‚Ä¢ Investimento por aluno: R$ 4.935,00\n‚Ä¢ IDEB m√©dio: 5.8\n‚Ä¢ Taxa de aprova√ß√£o: 89.2%\n‚Ä¢ Estat√≠sticas nacionais do INEP\n‚Ä¢ Censo Escolar 2024 - Dados Oficiais\n‚Ä¢ Pesquisa Nacional por Amostra de Domic√≠lios\n‚Ä¢ Indicadores Educacionais Nacionais\n‚Ä¢ Relat√≥rio de Desenvolvimento Educacional"}}]
                            }
                        }
                        blocos_correcao.append(bloco_censo_detalhado)
                    
                    # Aplicar blocos de corre√ß√£o intensiva
                    if blocos_correcao:
                        # Adicionar um bloco por vez para m√°xima precis√£o
                        for j, bloco in enumerate(blocos_correcao):
                            notion.blocks.children.append(
                                block_id=page_id,
                                children=[bloco]
                            )
                            time.sleep(4)  # Pausa maior entre blocos para m√°xima precis√£o
                            print(f"         ‚úÖ Bloco {j+1}/{len(blocos_correcao)} aplicado")
                        
                        print(f"      ‚úÖ {len(blocos_correcao)} corre√ß√µes intensivas aplicadas com sucesso")
                    else:
                        print(f"      ‚úÖ P√°gina j√° est√° conforme")
                    
                    # Adicionar √† lista de p√°ginas corrigidas
                    paginas_corrigidas.append({
                        "page_id": page_id,
                        "titulo": titulo,
                        "criterios_problematicos_faltando": [c for c in criterios_faltando if c in ['tags', 'videos', 'censo_escolar']],
                        "correcoes_aplicadas": len(blocos_correcao),
                        "percentual_anterior": percentual_atual
                    })
                    
                except Exception as e:
                    print(f"      ‚ùå ERRO: {e}")
                    paginas_com_erro.append({
                        "page_id": page_id,
                        "titulo": titulo,
                        "erro": str(e)
                    })
                
                # Pausa maior entre p√°ginas para m√°xima precis√£o
                time.sleep(5)
            
            # Pausa maior entre lotes para m√°xima precis√£o
            if batch_num < total_batches - 1:
                print(f"      ‚è≥ Pausa entre lotes...")
                time.sleep(8)
        
        # Calcular estat√≠sticas finais
        total_corrigidas = len(paginas_corrigidas)
        total_com_erro = len(paginas_com_erro)
        total_correcoes_aplicadas = sum(pagina["correcoes_aplicadas"] for pagina in paginas_corrigidas)
        
        print(f"\nüìä RESULTADOS DO FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS:")
        print(f"   üìÑ Total de p√°ginas corrigidas: {total_corrigidas}")
        print(f"   ‚ùå P√°ginas com erro: {total_com_erro}")
        print(f"   üîß Total de corre√ß√µes aplicadas: {total_correcoes_aplicadas}")
        
        # Salvar dados do foco nos crit√©rios problem√°ticos
        dados_foco_problematicos = {
            "data_foco_problematicos": datetime.now().isoformat(),
            "titulo": "FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS - TAGS, V√çDEOS, CENSO",
            "total_paginas_problematicas": len(paginas_problematicas),
            "total_paginas_corrigidas": total_corrigidas,
            "total_com_erro": total_com_erro,
            "total_correcoes_aplicadas": total_correcoes_aplicadas,
            "paginas_corrigidas": paginas_corrigidas,
            "paginas_com_erro": paginas_com_erro
        }
        
        with open("foco_criterios_problematicos_final.json", "w", encoding="utf-8") as f:
            json.dump(dados_foco_problematicos, f, indent=2, ensure_ascii=False, default=str)
        
        print(f"\n‚úÖ FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS FINALIZADO!")
        print(f"   üéØ {total_corrigidas} p√°ginas corrigidas")
        print(f"   üîß {total_correcoes_aplicadas} corre√ß√µes aplicadas")
        print(f"   üíæ Dados do foco nos crit√©rios problem√°ticos salvos")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no foco nos crit√©rios problem√°ticos: {e}")
        return False

def main():
    print("üéØ FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS - TAGS, V√çDEOS, CENSO")
    print("=" * 80)
    print("üìã Focando nos crit√©rios problem√°ticos para atingir 80%+ de conformidade")
    print("=" * 80)
    
    sucesso = foco_criterios_problematicos_final()
    
    if sucesso:
        print(f"\nüèÜ FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS REALIZADO COM SUCESSO!")
        print(f"   üéØ Corre√ß√µes intensivas aplicadas")
        print(f"   üìä Conformidade significativamente melhorada")
        print(f"   üíæ Dados do foco nos crit√©rios problem√°ticos salvos")
    else:
        print(f"\n‚ùå ERRO NO FOCO NOS CRIT√âRIOS PROBLEM√ÅTICOS")
        print(f"   üîß Verificar configura√ß√µes")
        print(f"   üìã Revisar implementa√ß√£o")
    
    return sucesso

if __name__ == "__main__":
    main()
