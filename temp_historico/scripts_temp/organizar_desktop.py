#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Organiza√ß√£o Autom√°tica do Desktop
Organiza arquivos automaticamente nas pastas do projeto
"""

import os
import shutil
from pathlib import Path
import time
from datetime import datetime

def organizar_desktop(desktop_path, project_root):
    """Organiza arquivos do desktop nas pastas do projeto"""
    print(f"üßπ Iniciando organiza√ß√£o autom√°tica do desktop em: {desktop_path}")
    
    scripts_dir = Path(project_root) / "scripts"
    docs_dir = Path(project_root) / "docs"
    conteudo_dir = Path(project_root) / "2_conteudo" / "01_ideias_e_rascunhos"
    
    # Criar diret√≥rios se n√£o existirem
    scripts_dir.mkdir(parents=True, exist_ok=True)
    docs_dir.mkdir(parents=True, exist_ok=True)
    conteudo_dir.mkdir(parents=True, exist_ok=True)
    
    arquivos_movidos = []
    
    try:
        for item in os.listdir(desktop_path):
            item_path = Path(desktop_path) / item
            
            if item_path.is_file():
                # Scripts Python
                if item.endswith(".py"):
                    try:
                        shutil.move(item_path, scripts_dir / item)
                        arquivos_movidos.append(f"Script: {item} ‚Üí scripts/")
                        print(f"‚úÖ Movido: {item} para scripts/")
                    except Exception as e:
                        arquivos_movidos.append(f"Erro ao mover script {item}: {e}")
                        print(f"‚ùå Erro ao mover script {item}: {e}")
                
                # Relat√≥rios JSON
                elif item.endswith(".json"):
                    try:
                        shutil.move(item_path, docs_dir / item)
                        arquivos_movidos.append(f"Relat√≥rio: {item} ‚Üí docs/")
                        print(f"‚úÖ Movido: {item} para docs/")
                    except Exception as e:
                        arquivos_movidos.append(f"Erro ao mover relat√≥rio {item}: {e}")
                        print(f"‚ùå Erro ao mover relat√≥rio {item}: {e}")
                
                # Documentos Markdown
                elif item.endswith(".md"):
                    try:
                        shutil.move(item_path, conteudo_dir / item)
                        arquivos_movidos.append(f"Conte√∫do: {item} ‚Üí 2_conteudo/01_ideias_e_rascunhos/")
                        print(f"‚úÖ Movido: {item} para 2_conteudo/01_ideias_e_rascunhos/")
                    except Exception as e:
                        arquivos_movidos.append(f"Erro ao mover conte√∫do {item}: {e}")
                        print(f"‚ùå Erro ao mover conte√∫do {item}: {e}")
                
                # Arquivos de texto
                elif item.endswith((".txt", ".csv")):
                    try:
                        shutil.move(item_path, docs_dir / item)
                        arquivos_movidos.append(f"Documento: {item} ‚Üí docs/")
                        print(f"‚úÖ Movido: {item} para docs/")
                    except Exception as e:
                        arquivos_movidos.append(f"Erro ao mover documento {item}: {e}")
                        print(f"‚ùå Erro ao mover documento {item}: {e}")
                
                # Ignorar arquivos de sistema
                elif item in ['desktop.ini', 'Thumbs.db']:
                    print(f"‚è≠Ô∏è  Ignorado (arquivo de sistema): {item}")
                    continue
                
                # Outros arquivos
                else:
                    print(f"‚ùì Arquivo n√£o categorizado: {item}")
    
    except Exception as e:
        print(f"‚ùå Erro ao acessar desktop: {e}")
        return []
    
    if not arquivos_movidos:
        print("‚ú® Nenhum arquivo para organizar no momento.")
    
    return arquivos_movidos

def gerar_relatorio(arquivos_movidos, project_root):
    """Gera relat√≥rio da organiza√ß√£o"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    relatorio_path = Path(project_root) / "docs" / f"relatorio_organizacao_{timestamp}.md"
    
    relatorio_content = f"""# üìÑ Relat√≥rio de Organiza√ß√£o Autom√°tica

## Data da Organiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

## üöÄ Resumo das A√ß√µes Realizadas

Este relat√≥rio detalha as a√ß√µes tomadas para organizar automaticamente os arquivos do desktop.

### üìä Estat√≠sticas
- **Total de arquivos movidos**: {len(arquivos_movidos)}
- **Data/Hora**: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

### üìÅ Arquivos Movidos

"""
    
    if arquivos_movidos:
        for arquivo in arquivos_movidos:
            relatorio_content += f"- {arquivo}\n"
    else:
        relatorio_content += "Nenhum arquivo foi movido.\n"
    
    relatorio_content += f"""
## ‚úÖ Conclus√£o

A organiza√ß√£o autom√°tica foi conclu√≠da com sucesso. Todos os arquivos identificados foram movidos para suas respectivas pastas dentro do projeto.

**Desktop organizado e limpo!** üéâ
"""
    
    try:
        with open(relatorio_path, 'w', encoding='utf-8') as f:
            f.write(relatorio_content)
        print(f"üìÑ Relat√≥rio salvo em: {relatorio_path}")
    except Exception as e:
        print(f"‚ùå Erro ao salvar relat√≥rio: {e}")

def main():
    """Fun√ß√£o principal"""
    print("üßπ ORGANIZA√á√ÉO AUTOM√ÅTICA DO DESKTOP")
    print("="*50)
    
    # Caminhos
    desktop_path = Path.home() / "Desktop"
    project_root = Path(__file__).parent.parent
    
    print(f"üìÅ Desktop: {desktop_path}")
    print(f"üìÅ Projeto: {project_root}")
    print()
    
    # Executar organiza√ß√£o
    arquivos_movidos = organizar_desktop(desktop_path, project_root)
    
    # Gerar relat√≥rio
    if arquivos_movidos:
        gerar_relatorio(arquivos_movidos, project_root)
    
    print("\n" + "="*50)
    print("üéâ ORGANIZA√á√ÉO CONCLU√çDA!")
    print("="*50)
    print(f"üìÑ Arquivos movidos: {len(arquivos_movidos)}")
    print("‚ú® Desktop limpo e organizado!")

if __name__ == "__main__":
    main()
